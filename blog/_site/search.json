[
  {
    "objectID": "posts/2024-04-5-avocado.html",
    "href": "posts/2024-04-5-avocado.html",
    "title": "Avocado Sales Analysis",
    "section": "",
    "text": "Avocado is a fruit of the family Lauraceae. It is also known as alligator pear or butter fruit. Avocados are cultivated for their buttery consistency and nutty flavor and are used in both savory and sweet dishes. They are a source of vitamins C, E, K, and B6, as well as riboflavin, niacin, folate, pantothenic acid, magnesium, and potassium. They also provide lutein, beta carotene, and omega-3 fatty acids. Avocados contain high levels of healthy, beneficial fats, which can help a person feel fuller between meals. Learn more:\n\nThis project will use a bar plot to figure out which size is the most popular.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n%matplotlib inline\n\n\navocado = pd.read_csv('../Machine- Learning/avocado/avocado.csv', index_col=0)\n\navocado.head()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n0\n2015-12-27\n1.33\n64236.62\n1036.74\n54454.85\n48.16\n8696.87\n8603.62\n93.25\n0.0\nconventional\n2015\nAlbany\n\n\n1\n2015-12-20\n1.35\n54876.98\n674.28\n44638.81\n58.33\n9505.56\n9408.07\n97.49\n0.0\nconventional\n2015\nAlbany\n\n\n2\n2015-12-13\n0.93\n118220.22\n794.70\n109149.67\n130.50\n8145.35\n8042.21\n103.14\n0.0\nconventional\n2015\nAlbany\n\n\n3\n2015-12-06\n1.08\n78992.15\n1132.00\n71976.41\n72.58\n5811.16\n5677.40\n133.76\n0.0\nconventional\n2015\nAlbany\n\n\n4\n2015-11-29\n1.28\n51039.60\n941.48\n43838.39\n75.78\n6183.95\n5986.26\n197.69\n0.0\nconventional\n2015\nAlbany\n\n\n\n\n\n\n\n\n\navocado.tail()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n7\n2018-02-04\n1.63\n17074.83\n2046.96\n1529.20\n0.00\n13498.67\n13066.82\n431.85\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n8\n2018-01-28\n1.71\n13888.04\n1191.70\n3431.50\n0.00\n9264.84\n8940.04\n324.80\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n9\n2018-01-21\n1.87\n13766.76\n1191.92\n2452.79\n727.94\n9394.11\n9351.80\n42.31\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n10\n2018-01-14\n1.93\n16205.22\n1527.63\n2981.04\n727.01\n10969.54\n10919.54\n50.00\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n11\n2018-01-07\n1.62\n17489.58\n2894.77\n2356.13\n224.53\n12014.15\n11988.14\n26.01\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n\n\n\n\n\n\n\nBar plots are used for revealing relationships between categorical data () and numerical data (Volume) variables, but manipulation on the data first is needed in order to get the numbers needed for plotting."
  },
  {
    "objectID": "posts/2024-04-5-avocado.html#time-series-modeling-using-historical-data.",
    "href": "posts/2024-04-5-avocado.html#time-series-modeling-using-historical-data.",
    "title": "Avocado Sales Analysis",
    "section": "",
    "text": "Avocado is a fruit of the family Lauraceae. It is also known as alligator pear or butter fruit. Avocados are cultivated for their buttery consistency and nutty flavor and are used in both savory and sweet dishes. They are a source of vitamins C, E, K, and B6, as well as riboflavin, niacin, folate, pantothenic acid, magnesium, and potassium. They also provide lutein, beta carotene, and omega-3 fatty acids. Avocados contain high levels of healthy, beneficial fats, which can help a person feel fuller between meals. Learn more:\n\nThis project will use a bar plot to figure out which size is the most popular.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n%matplotlib inline\n\n\navocado = pd.read_csv('../Machine- Learning/avocado/avocado.csv', index_col=0)\n\navocado.head()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n0\n2015-12-27\n1.33\n64236.62\n1036.74\n54454.85\n48.16\n8696.87\n8603.62\n93.25\n0.0\nconventional\n2015\nAlbany\n\n\n1\n2015-12-20\n1.35\n54876.98\n674.28\n44638.81\n58.33\n9505.56\n9408.07\n97.49\n0.0\nconventional\n2015\nAlbany\n\n\n2\n2015-12-13\n0.93\n118220.22\n794.70\n109149.67\n130.50\n8145.35\n8042.21\n103.14\n0.0\nconventional\n2015\nAlbany\n\n\n3\n2015-12-06\n1.08\n78992.15\n1132.00\n71976.41\n72.58\n5811.16\n5677.40\n133.76\n0.0\nconventional\n2015\nAlbany\n\n\n4\n2015-11-29\n1.28\n51039.60\n941.48\n43838.39\n75.78\n6183.95\n5986.26\n197.69\n0.0\nconventional\n2015\nAlbany\n\n\n\n\n\n\n\n\n\navocado.tail()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n7\n2018-02-04\n1.63\n17074.83\n2046.96\n1529.20\n0.00\n13498.67\n13066.82\n431.85\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n8\n2018-01-28\n1.71\n13888.04\n1191.70\n3431.50\n0.00\n9264.84\n8940.04\n324.80\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n9\n2018-01-21\n1.87\n13766.76\n1191.92\n2452.79\n727.94\n9394.11\n9351.80\n42.31\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n10\n2018-01-14\n1.93\n16205.22\n1527.63\n2981.04\n727.01\n10969.54\n10919.54\n50.00\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n11\n2018-01-07\n1.62\n17489.58\n2894.77\n2356.13\n224.53\n12014.15\n11988.14\n26.01\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n\n\n\n\n\n\n\nBar plots are used for revealing relationships between categorical data () and numerical data (Volume) variables, but manipulation on the data first is needed in order to get the numbers needed for plotting."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Hi! Welcome to My Blog. I’m Victor Alando, a Data Analyst and a freelancer, A Computer Technology specialist. I like manipulating, exploring, visualizing and modeling data to obtain insights that can be used in future decision making.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAvocado Sales Analysis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImporting Libraries and Modules\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "welcome to my blog page. I am a data sciencetist"
  },
  {
    "objectID": "notebooks/avocado.html",
    "href": "notebooks/avocado.html",
    "title": "Avocado Sales Analysis",
    "section": "",
    "text": "Avocado is a fruit of the family Lauraceae. It is also known as alligator pear or butter fruit. Avocados are cultivated for their buttery consistency and nutty flavor and are used in both savory and sweet dishes. They are a source of vitamins C, E, K, and B6, as well as riboflavin, niacin, folate, pantothenic acid, magnesium, and potassium. They also provide lutein, beta carotene, and omega-3 fatty acids. Avocados contain high levels of healthy, beneficial fats, which can help a person feel fuller between meals. Learn more:\n\nThis project will use a bar plot to figure out which size is the most popular.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n%matplotlib inline\n\n\navocado = pd.read_csv('../Machine- Learning/avocado/avocado.csv', index_col=0)\n\navocado.head()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n0\n2015-12-27\n1.33\n64236.62\n1036.74\n54454.85\n48.16\n8696.87\n8603.62\n93.25\n0.0\nconventional\n2015\nAlbany\n\n\n1\n2015-12-20\n1.35\n54876.98\n674.28\n44638.81\n58.33\n9505.56\n9408.07\n97.49\n0.0\nconventional\n2015\nAlbany\n\n\n2\n2015-12-13\n0.93\n118220.22\n794.70\n109149.67\n130.50\n8145.35\n8042.21\n103.14\n0.0\nconventional\n2015\nAlbany\n\n\n3\n2015-12-06\n1.08\n78992.15\n1132.00\n71976.41\n72.58\n5811.16\n5677.40\n133.76\n0.0\nconventional\n2015\nAlbany\n\n\n4\n2015-11-29\n1.28\n51039.60\n941.48\n43838.39\n75.78\n6183.95\n5986.26\n197.69\n0.0\nconventional\n2015\nAlbany\n\n\n\n\n\n\n\n\n\navocado.tail()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n7\n2018-02-04\n1.63\n17074.83\n2046.96\n1529.20\n0.00\n13498.67\n13066.82\n431.85\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n8\n2018-01-28\n1.71\n13888.04\n1191.70\n3431.50\n0.00\n9264.84\n8940.04\n324.80\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n9\n2018-01-21\n1.87\n13766.76\n1191.92\n2452.79\n727.94\n9394.11\n9351.80\n42.31\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n10\n2018-01-14\n1.93\n16205.22\n1527.63\n2981.04\n727.01\n10969.54\n10919.54\n50.00\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n11\n2018-01-07\n1.62\n17489.58\n2894.77\n2356.13\n224.53\n12014.15\n11988.14\n26.01\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n\n\n\n\n\n\n\nBar plots are used for revealing relationships between categorical data () and numerical data (Volume) variables, but manipulation on the data first is needed in order to get the numbers needed for plotting."
  },
  {
    "objectID": "notebooks/avocado.html#time-series-modeling-using-historical-data.",
    "href": "notebooks/avocado.html#time-series-modeling-using-historical-data.",
    "title": "Avocado Sales Analysis",
    "section": "",
    "text": "Avocado is a fruit of the family Lauraceae. It is also known as alligator pear or butter fruit. Avocados are cultivated for their buttery consistency and nutty flavor and are used in both savory and sweet dishes. They are a source of vitamins C, E, K, and B6, as well as riboflavin, niacin, folate, pantothenic acid, magnesium, and potassium. They also provide lutein, beta carotene, and omega-3 fatty acids. Avocados contain high levels of healthy, beneficial fats, which can help a person feel fuller between meals. Learn more:\n\nThis project will use a bar plot to figure out which size is the most popular.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n%matplotlib inline\n\n\navocado = pd.read_csv('../Machine- Learning/avocado/avocado.csv', index_col=0)\n\navocado.head()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n0\n2015-12-27\n1.33\n64236.62\n1036.74\n54454.85\n48.16\n8696.87\n8603.62\n93.25\n0.0\nconventional\n2015\nAlbany\n\n\n1\n2015-12-20\n1.35\n54876.98\n674.28\n44638.81\n58.33\n9505.56\n9408.07\n97.49\n0.0\nconventional\n2015\nAlbany\n\n\n2\n2015-12-13\n0.93\n118220.22\n794.70\n109149.67\n130.50\n8145.35\n8042.21\n103.14\n0.0\nconventional\n2015\nAlbany\n\n\n3\n2015-12-06\n1.08\n78992.15\n1132.00\n71976.41\n72.58\n5811.16\n5677.40\n133.76\n0.0\nconventional\n2015\nAlbany\n\n\n4\n2015-11-29\n1.28\n51039.60\n941.48\n43838.39\n75.78\n6183.95\n5986.26\n197.69\n0.0\nconventional\n2015\nAlbany\n\n\n\n\n\n\n\n\n\navocado.tail()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n7\n2018-02-04\n1.63\n17074.83\n2046.96\n1529.20\n0.00\n13498.67\n13066.82\n431.85\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n8\n2018-01-28\n1.71\n13888.04\n1191.70\n3431.50\n0.00\n9264.84\n8940.04\n324.80\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n9\n2018-01-21\n1.87\n13766.76\n1191.92\n2452.79\n727.94\n9394.11\n9351.80\n42.31\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n10\n2018-01-14\n1.93\n16205.22\n1527.63\n2981.04\n727.01\n10969.54\n10919.54\n50.00\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n11\n2018-01-07\n1.62\n17489.58\n2894.77\n2356.13\n224.53\n12014.15\n11988.14\n26.01\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n\n\n\n\n\n\n\nBar plots are used for revealing relationships between categorical data () and numerical data (Volume) variables, but manipulation on the data first is needed in order to get the numbers needed for plotting."
  },
  {
    "objectID": "notebooks/2024-04-05-avocado.html",
    "href": "notebooks/2024-04-05-avocado.html",
    "title": "Avocado Sales Analysis",
    "section": "",
    "text": "Avocado is a fruit of the family Lauraceae. It is also known as alligator pear or butter fruit. Avocados are cultivated for their buttery consistency and nutty flavor and are used in both savory and sweet dishes. They are a source of vitamins C, E, K, and B6, as well as riboflavin, niacin, folate, pantothenic acid, magnesium, and potassium. They also provide lutein, beta carotene, and omega-3 fatty acids. Avocados contain high levels of healthy, beneficial fats, which can help a person feel fuller between meals. Learn more:\n\nThis project will use a bar plot to figure out which size is the most popular.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n%matplotlib inline\n\n\navocado = pd.read_csv('../Machine- Learning/avocado/avocado.csv', index_col=0)\n\navocado.head()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n0\n2015-12-27\n1.33\n64236.62\n1036.74\n54454.85\n48.16\n8696.87\n8603.62\n93.25\n0.0\nconventional\n2015\nAlbany\n\n\n1\n2015-12-20\n1.35\n54876.98\n674.28\n44638.81\n58.33\n9505.56\n9408.07\n97.49\n0.0\nconventional\n2015\nAlbany\n\n\n2\n2015-12-13\n0.93\n118220.22\n794.70\n109149.67\n130.50\n8145.35\n8042.21\n103.14\n0.0\nconventional\n2015\nAlbany\n\n\n3\n2015-12-06\n1.08\n78992.15\n1132.00\n71976.41\n72.58\n5811.16\n5677.40\n133.76\n0.0\nconventional\n2015\nAlbany\n\n\n4\n2015-11-29\n1.28\n51039.60\n941.48\n43838.39\n75.78\n6183.95\n5986.26\n197.69\n0.0\nconventional\n2015\nAlbany\n\n\n\n\n\n\n\n\n\navocado.tail()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n7\n2018-02-04\n1.63\n17074.83\n2046.96\n1529.20\n0.00\n13498.67\n13066.82\n431.85\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n8\n2018-01-28\n1.71\n13888.04\n1191.70\n3431.50\n0.00\n9264.84\n8940.04\n324.80\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n9\n2018-01-21\n1.87\n13766.76\n1191.92\n2452.79\n727.94\n9394.11\n9351.80\n42.31\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n10\n2018-01-14\n1.93\n16205.22\n1527.63\n2981.04\n727.01\n10969.54\n10919.54\n50.00\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n11\n2018-01-07\n1.62\n17489.58\n2894.77\n2356.13\n224.53\n12014.15\n11988.14\n26.01\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n\n\n\n\n\n\n\nBar plots are used for revealing relationships between categorical data () and numerical data (Volume) variables, but manipulation on the data first is needed in order to get the numbers needed for plotting."
  },
  {
    "objectID": "notebooks/2024-04-05-avocado.html#time-series-modeling-using-historical-data.",
    "href": "notebooks/2024-04-05-avocado.html#time-series-modeling-using-historical-data.",
    "title": "Avocado Sales Analysis",
    "section": "",
    "text": "Avocado is a fruit of the family Lauraceae. It is also known as alligator pear or butter fruit. Avocados are cultivated for their buttery consistency and nutty flavor and are used in both savory and sweet dishes. They are a source of vitamins C, E, K, and B6, as well as riboflavin, niacin, folate, pantothenic acid, magnesium, and potassium. They also provide lutein, beta carotene, and omega-3 fatty acids. Avocados contain high levels of healthy, beneficial fats, which can help a person feel fuller between meals. Learn more:\n\nThis project will use a bar plot to figure out which size is the most popular.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n%matplotlib inline\n\n\navocado = pd.read_csv('../Machine- Learning/avocado/avocado.csv', index_col=0)\n\navocado.head()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n0\n2015-12-27\n1.33\n64236.62\n1036.74\n54454.85\n48.16\n8696.87\n8603.62\n93.25\n0.0\nconventional\n2015\nAlbany\n\n\n1\n2015-12-20\n1.35\n54876.98\n674.28\n44638.81\n58.33\n9505.56\n9408.07\n97.49\n0.0\nconventional\n2015\nAlbany\n\n\n2\n2015-12-13\n0.93\n118220.22\n794.70\n109149.67\n130.50\n8145.35\n8042.21\n103.14\n0.0\nconventional\n2015\nAlbany\n\n\n3\n2015-12-06\n1.08\n78992.15\n1132.00\n71976.41\n72.58\n5811.16\n5677.40\n133.76\n0.0\nconventional\n2015\nAlbany\n\n\n4\n2015-11-29\n1.28\n51039.60\n941.48\n43838.39\n75.78\n6183.95\n5986.26\n197.69\n0.0\nconventional\n2015\nAlbany\n\n\n\n\n\n\n\n\n\navocado.tail()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n7\n2018-02-04\n1.63\n17074.83\n2046.96\n1529.20\n0.00\n13498.67\n13066.82\n431.85\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n8\n2018-01-28\n1.71\n13888.04\n1191.70\n3431.50\n0.00\n9264.84\n8940.04\n324.80\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n9\n2018-01-21\n1.87\n13766.76\n1191.92\n2452.79\n727.94\n9394.11\n9351.80\n42.31\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n10\n2018-01-14\n1.93\n16205.22\n1527.63\n2981.04\n727.01\n10969.54\n10919.54\n50.00\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n11\n2018-01-07\n1.62\n17489.58\n2894.77\n2356.13\n224.53\n12014.15\n11988.14\n26.01\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n\n\n\n\n\n\n\nBar plots are used for revealing relationships between categorical data () and numerical data (Volume) variables, but manipulation on the data first is needed in order to get the numbers needed for plotting."
  },
  {
    "objectID": "posts/2020-10-19-cleaning data in r.html",
    "href": "posts/2020-10-19-cleaning data in r.html",
    "title": "Introduction and Exproling Raw data",
    "section": "",
    "text": "library(readr)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(installr)\n\nWarning message:\n\"package 'stringr' was built under R version 3.6.3\"Warning message:\n\"package 'installr' was built under R version 3.6.3\"\nWelcome to installr version 0.22.0\n\nMore information is available on the installr project website:\nhttps://github.com/talgalili/installr/\n\nContact: &lt;tal.galili@gmail.com&gt;\nSuggestions and bug-reports can be submitted at: https://github.com/talgalili/installr/issues\n\n            To suppress this message use:\n            suppressPackageStartupMessages(library(installr))\n\n\n\n\nweather = readRDS(gzcon(url('https://assets.datacamp.com/production/repositories/34/datasets/b3c1036d9a60a9dfe0f99051d2474a54f76055ea/weather.rds')))\n\n\nclass(weather)\n\n'data.frame'\n\n\n\nhead(weather)\n\n\n\n\n\nX\nyear\nmonth\nmeasure\nX1\nX2\nX3\nX4\nX5\nX6\n...\nX22\nX23\nX24\nX25\nX26\nX27\nX28\nX29\nX30\nX31\n\n\n\n\n1\n2014\n12\nMax.TemperatureF\n64\n42\n51\n43\n42\n45\n...\n44\n47\n46\n59\n50\n52\n52\n41\n30\n30\n\n\n2\n2014\n12\nMean.TemperatureF\n52\n38\n44\n37\n34\n42\n...\n39\n45\n44\n52\n44\n45\n46\n36\n26\n25\n\n\n3\n2014\n12\nMin.TemperatureF\n39\n33\n37\n30\n26\n38\n...\n33\n42\n41\n44\n37\n38\n40\n30\n22\n20\n\n\n4\n2014\n12\nMax.Dew.PointF\n46\n40\n49\n24\n37\n45\n...\n39\n45\n46\n58\n31\n34\n42\n26\n10\n8\n\n\n5\n2014\n12\nMeanDew.PointF\n40\n27\n42\n21\n25\n40\n...\n34\n42\n44\n43\n29\n31\n35\n20\n4\n5\n\n\n6\n2014\n12\nMin.DewpointF\n26\n17\n24\n13\n12\n36\n...\n25\n37\n41\n29\n28\n29\n27\n10\n-6\n1\n\n\n\n\n\n\n\ntail(weather)\n\n\n\n\n\n\nX\nyear\nmonth\nmeasure\nX1\nX2\nX3\nX4\nX5\nX6\n...\nX22\nX23\nX24\nX25\nX26\nX27\nX28\nX29\nX30\nX31\n\n\n\n\n281\n281\n2015\n12\nMean.Wind.SpeedMPH\n6\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n282\n282\n2015\n12\nMax.Gust.SpeedMPH\n17\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n283\n283\n2015\n12\nPrecipitationIn\n0.14\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n284\n284\n2015\n12\nCloudCover\n7\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n285\n285\n2015\n12\nEvents\nRain\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n286\n286\n2015\n12\nWindDirDegrees\n109\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\n\nstr(weather)\n\n'data.frame':   286 obs. of  35 variables:\n $ X      : int  1 2 3 4 5 6 7 8 9 10 ...\n $ year   : int  2014 2014 2014 2014 2014 2014 2014 2014 2014 2014 ...\n $ month  : int  12 12 12 12 12 12 12 12 12 12 ...\n $ measure: chr  \"Max.TemperatureF\" \"Mean.TemperatureF\" \"Min.TemperatureF\" \"Max.Dew.PointF\" ...\n $ X1     : chr  \"64\" \"52\" \"39\" \"46\" ...\n $ X2     : chr  \"42\" \"38\" \"33\" \"40\" ...\n $ X3     : chr  \"51\" \"44\" \"37\" \"49\" ...\n $ X4     : chr  \"43\" \"37\" \"30\" \"24\" ...\n $ X5     : chr  \"42\" \"34\" \"26\" \"37\" ...\n $ X6     : chr  \"45\" \"42\" \"38\" \"45\" ...\n $ X7     : chr  \"38\" \"30\" \"21\" \"36\" ...\n $ X8     : chr  \"29\" \"24\" \"18\" \"28\" ...\n $ X9     : chr  \"49\" \"39\" \"29\" \"49\" ...\n $ X10    : chr  \"48\" \"43\" \"38\" \"45\" ...\n $ X11    : chr  \"39\" \"36\" \"32\" \"37\" ...\n $ X12    : chr  \"39\" \"35\" \"31\" \"28\" ...\n $ X13    : chr  \"42\" \"37\" \"32\" \"28\" ...\n $ X14    : chr  \"45\" \"39\" \"33\" \"29\" ...\n $ X15    : chr  \"42\" \"37\" \"32\" \"33\" ...\n $ X16    : chr  \"44\" \"40\" \"35\" \"42\" ...\n $ X17    : chr  \"49\" \"45\" \"41\" \"46\" ...\n $ X18    : chr  \"44\" \"40\" \"36\" \"34\" ...\n $ X19    : chr  \"37\" \"33\" \"29\" \"25\" ...\n $ X20    : chr  \"36\" \"32\" \"27\" \"30\" ...\n $ X21    : chr  \"36\" \"33\" \"30\" \"30\" ...\n $ X22    : chr  \"44\" \"39\" \"33\" \"39\" ...\n $ X23    : chr  \"47\" \"45\" \"42\" \"45\" ...\n $ X24    : chr  \"46\" \"44\" \"41\" \"46\" ...\n $ X25    : chr  \"59\" \"52\" \"44\" \"58\" ...\n $ X26    : chr  \"50\" \"44\" \"37\" \"31\" ...\n $ X27    : chr  \"52\" \"45\" \"38\" \"34\" ...\n $ X28    : chr  \"52\" \"46\" \"40\" \"42\" ...\n $ X29    : chr  \"41\" \"36\" \"30\" \"26\" ...\n $ X30    : chr  \"30\" \"26\" \"22\" \"10\" ...\n $ X31    : chr  \"30\" \"25\" \"20\" \"8\" ...\n\n\n\ndim(weather)\n\n\n    286\n    35\n\n\n\n\nbmi=read_csv('https://assets.datacamp.com/production/repositories/34/datasets/a0a569ebbb34500d11979eba95360125127e6434/bmi_clean.csv')\n\nParsed with column specification:\ncols(\n  .default = col_double(),\n  Country = col_character()\n)\nSee spec(...) for full column specifications.\n\n\n\nclass(bmi)\n\n\n    'spec_tbl_df'\n    'tbl_df'\n    'tbl'\n    'data.frame'\n\n\n\n\ndim(bmi)\n\n\n    199\n    30\n\n\n\n\nhead(bmi)\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nAfghanistan\n21.48678\n21.46552\n21.45145\n21.43822\n21.42734\n21.41222\n21.40132\n21.37679\n21.34018\n...\n20.75469\n20.69521\n20.62643\n20.59848\n20.58706\n20.57759\n20.58084\n20.58749\n20.60246\n20.62058\n\n\nAlbania\n25.22533\n25.23981\n25.25636\n25.27176\n25.27901\n25.28669\n25.29451\n25.30217\n25.30450\n...\n25.46555\n25.55835\n25.66701\n25.77167\n25.87274\n25.98136\n26.08939\n26.20867\n26.32753\n26.44657\n\n\nAlgeria\n22.25703\n22.34745\n22.43647\n22.52105\n22.60633\n22.69501\n22.76979\n22.84096\n22.90644\n...\n23.69486\n23.77659\n23.86256\n23.95294\n24.05243\n24.15957\n24.27001\n24.38270\n24.48846\n24.59620\n\n\nAndorra\n25.66652\n25.70868\n25.74681\n25.78250\n25.81874\n25.85236\n25.89089\n25.93414\n25.98477\n...\n26.75078\n26.83179\n26.92373\n27.02525\n27.12481\n27.23107\n27.32827\n27.43588\n27.53363\n27.63048\n\n\nAngola\n20.94876\n20.94371\n20.93754\n20.93187\n20.93569\n20.94857\n20.96030\n20.98025\n21.01375\n...\n21.31954\n21.37480\n21.43664\n21.51765\n21.59924\n21.69218\n21.80564\n21.93881\n22.08962\n22.25083\n\n\nAntigua and Barbuda\n23.31424\n23.39054\n23.45883\n23.53735\n23.63584\n23.73109\n23.83449\n23.93649\n24.05364\n...\n24.91721\n24.99158\n25.05857\n25.13039\n25.20713\n25.29898\n25.39965\n25.51382\n25.64247\n25.76602\n\n\n\n\n\n\n\ntail(bmi)\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nVenezuela\n24.58052\n24.69666\n24.80082\n24.89208\n24.98440\n25.07104\n25.15587\n25.24624\n25.35274\n...\n26.50035\n26.61021\n26.71688\n26.79210\n26.85498\n26.95162\n27.05633\n27.17698\n27.30849\n27.44500\n\n\nVietnam\n19.01394\n19.03902\n19.06804\n19.09675\n19.13046\n19.16397\n19.19740\n19.23481\n19.27090\n...\n20.02081\n20.10343\n20.18623\n20.27145\n20.36402\n20.46585\n20.57277\n20.68655\n20.80189\n20.91630\n\n\nWest Bank and Gaza\n24.31624\n24.40192\n24.48713\n24.57107\n24.65582\n24.74148\n24.82984\n24.91615\n25.00108\n...\n26.28240\n26.39074\n26.45700\n26.48925\n26.51152\n26.52924\n26.54329\n26.54449\n26.55460\n26.57750\n\n\nYemen, Rep.\n22.90384\n22.96813\n23.02669\n23.07279\n23.12566\n23.16944\n23.20933\n23.25043\n23.29401\n...\n23.85482\n23.92467\n23.99129\n24.05692\n24.12459\n24.19204\n24.25638\n24.32120\n24.37949\n24.44157\n\n\nZambia\n19.66295\n19.69512\n19.72538\n19.75420\n19.78070\n19.80335\n19.82396\n19.85065\n19.88320\n...\n20.15094\n20.17261\n20.20266\n20.24298\n20.29474\n20.35966\n20.43398\n20.51422\n20.59770\n20.68321\n\n\nZimbabwe\n21.46989\n21.48867\n21.50738\n21.52936\n21.53383\n21.54341\n21.54859\n21.54590\n21.55396\n...\n21.68873\n21.72652\n21.76514\n21.79645\n21.82499\n21.85806\n21.89495\n21.93371\n21.97405\n22.02660\n\n\n\n\n\n\n\nstr(bmi)\n\ntibble [199 x 30] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Country: chr [1:199] \"Afghanistan\" \"Albania\" \"Algeria\" \"Andorra\" ...\n $ Y1980  : num [1:199] 21.5 25.2 22.3 25.7 20.9 ...\n $ Y1981  : num [1:199] 21.5 25.2 22.3 25.7 20.9 ...\n $ Y1982  : num [1:199] 21.5 25.3 22.4 25.7 20.9 ...\n $ Y1983  : num [1:199] 21.4 25.3 22.5 25.8 20.9 ...\n $ Y1984  : num [1:199] 21.4 25.3 22.6 25.8 20.9 ...\n $ Y1985  : num [1:199] 21.4 25.3 22.7 25.9 20.9 ...\n $ Y1986  : num [1:199] 21.4 25.3 22.8 25.9 21 ...\n $ Y1987  : num [1:199] 21.4 25.3 22.8 25.9 21 ...\n $ Y1988  : num [1:199] 21.3 25.3 22.9 26 21 ...\n $ Y1989  : num [1:199] 21.3 25.3 23 26 21.1 ...\n $ Y1990  : num [1:199] 21.2 25.3 23 26.1 21.1 ...\n $ Y1991  : num [1:199] 21.2 25.3 23.1 26.2 21.1 ...\n $ Y1992  : num [1:199] 21.1 25.2 23.2 26.2 21.1 ...\n $ Y1993  : num [1:199] 21.1 25.2 23.3 26.3 21.1 ...\n $ Y1994  : num [1:199] 21 25.2 23.3 26.4 21.1 ...\n $ Y1995  : num [1:199] 20.9 25.3 23.4 26.4 21.2 ...\n $ Y1996  : num [1:199] 20.9 25.3 23.5 26.5 21.2 ...\n $ Y1997  : num [1:199] 20.8 25.3 23.5 26.6 21.2 ...\n $ Y1998  : num [1:199] 20.8 25.4 23.6 26.7 21.3 ...\n $ Y1999  : num [1:199] 20.8 25.5 23.7 26.8 21.3 ...\n $ Y2000  : num [1:199] 20.7 25.6 23.8 26.8 21.4 ...\n $ Y2001  : num [1:199] 20.6 25.7 23.9 26.9 21.4 ...\n $ Y2002  : num [1:199] 20.6 25.8 24 27 21.5 ...\n $ Y2003  : num [1:199] 20.6 25.9 24.1 27.1 21.6 ...\n $ Y2004  : num [1:199] 20.6 26 24.2 27.2 21.7 ...\n $ Y2005  : num [1:199] 20.6 26.1 24.3 27.3 21.8 ...\n $ Y2006  : num [1:199] 20.6 26.2 24.4 27.4 21.9 ...\n $ Y2007  : num [1:199] 20.6 26.3 24.5 27.5 22.1 ...\n $ Y2008  : num [1:199] 20.6 26.4 24.6 27.6 22.3 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Country = col_character(),\n  ..   Y1980 = col_double(),\n  ..   Y1981 = col_double(),\n  ..   Y1982 = col_double(),\n  ..   Y1983 = col_double(),\n  ..   Y1984 = col_double(),\n  ..   Y1985 = col_double(),\n  ..   Y1986 = col_double(),\n  ..   Y1987 = col_double(),\n  ..   Y1988 = col_double(),\n  ..   Y1989 = col_double(),\n  ..   Y1990 = col_double(),\n  ..   Y1991 = col_double(),\n  ..   Y1992 = col_double(),\n  ..   Y1993 = col_double(),\n  ..   Y1994 = col_double(),\n  ..   Y1995 = col_double(),\n  ..   Y1996 = col_double(),\n  ..   Y1997 = col_double(),\n  ..   Y1998 = col_double(),\n  ..   Y1999 = col_double(),\n  ..   Y2000 = col_double(),\n  ..   Y2001 = col_double(),\n  ..   Y2002 = col_double(),\n  ..   Y2003 = col_double(),\n  ..   Y2004 = col_double(),\n  ..   Y2005 = col_double(),\n  ..   Y2006 = col_double(),\n  ..   Y2007 = col_double(),\n  ..   Y2008 = col_double()\n  .. )\n\n\n\nglimpse(bmi)\n\nRows: 199\nColumns: 30\n$ Country &lt;chr&gt; \"Afghanistan\", \"Albania\", \"Algeria\", \"Andorra\", \"Angola\", \"...\n$ Y1980   &lt;dbl&gt; 21.48678, 25.22533, 22.25703, 25.66652, 20.94876, 23.31424,...\n$ Y1981   &lt;dbl&gt; 21.46552, 25.23981, 22.34745, 25.70868, 20.94371, 23.39054,...\n$ Y1982   &lt;dbl&gt; 21.45145, 25.25636, 22.43647, 25.74681, 20.93754, 23.45883,...\n$ Y1983   &lt;dbl&gt; 21.43822, 25.27176, 22.52105, 25.78250, 20.93187, 23.53735,...\n$ Y1984   &lt;dbl&gt; 21.42734, 25.27901, 22.60633, 25.81874, 20.93569, 23.63584,...\n$ Y1985   &lt;dbl&gt; 21.41222, 25.28669, 22.69501, 25.85236, 20.94857, 23.73109,...\n$ Y1986   &lt;dbl&gt; 21.40132, 25.29451, 22.76979, 25.89089, 20.96030, 23.83449,...\n$ Y1987   &lt;dbl&gt; 21.37679, 25.30217, 22.84096, 25.93414, 20.98025, 23.93649,...\n$ Y1988   &lt;dbl&gt; 21.34018, 25.30450, 22.90644, 25.98477, 21.01375, 24.05364,...\n$ Y1989   &lt;dbl&gt; 21.29845, 25.31944, 22.97931, 26.04450, 21.05269, 24.16347,...\n$ Y1990   &lt;dbl&gt; 21.24818, 25.32357, 23.04600, 26.10936, 21.09007, 24.26782,...\n$ Y1991   &lt;dbl&gt; 21.20269, 25.28452, 23.11333, 26.17912, 21.12136, 24.36568,...\n$ Y1992   &lt;dbl&gt; 21.14238, 25.23077, 23.18776, 26.24017, 21.14987, 24.45644,...\n$ Y1993   &lt;dbl&gt; 21.06376, 25.21192, 23.25764, 26.30356, 21.13938, 24.54096,...\n$ Y1994   &lt;dbl&gt; 20.97987, 25.22115, 23.32273, 26.36793, 21.14186, 24.60945,...\n$ Y1995   &lt;dbl&gt; 20.91132, 25.25874, 23.39526, 26.43569, 21.16022, 24.66461,...\n$ Y1996   &lt;dbl&gt; 20.85155, 25.31097, 23.46811, 26.50769, 21.19076, 24.72544,...\n$ Y1997   &lt;dbl&gt; 20.81307, 25.33988, 23.54160, 26.58255, 21.22621, 24.78714,...\n$ Y1998   &lt;dbl&gt; 20.78591, 25.39116, 23.61592, 26.66337, 21.27082, 24.84936,...\n$ Y1999   &lt;dbl&gt; 20.75469, 25.46555, 23.69486, 26.75078, 21.31954, 24.91721,...\n$ Y2000   &lt;dbl&gt; 20.69521, 25.55835, 23.77659, 26.83179, 21.37480, 24.99158,...\n$ Y2001   &lt;dbl&gt; 20.62643, 25.66701, 23.86256, 26.92373, 21.43664, 25.05857,...\n$ Y2002   &lt;dbl&gt; 20.59848, 25.77167, 23.95294, 27.02525, 21.51765, 25.13039,...\n$ Y2003   &lt;dbl&gt; 20.58706, 25.87274, 24.05243, 27.12481, 21.59924, 25.20713,...\n$ Y2004   &lt;dbl&gt; 20.57759, 25.98136, 24.15957, 27.23107, 21.69218, 25.29898,...\n$ Y2005   &lt;dbl&gt; 20.58084, 26.08939, 24.27001, 27.32827, 21.80564, 25.39965,...\n$ Y2006   &lt;dbl&gt; 20.58749, 26.20867, 24.38270, 27.43588, 21.93881, 25.51382,...\n$ Y2007   &lt;dbl&gt; 20.60246, 26.32753, 24.48846, 27.53363, 22.08962, 25.64247,...\n$ Y2008   &lt;dbl&gt; 20.62058, 26.44657, 24.59620, 27.63048, 22.25083, 25.76602,...\n\n\n\n# View the first 6 rows\nhead(bmi, n=6)\n\n# View the first 15 rows\nhead(bmi, n=15)\n\n# View the last 6 rows\ntail(bmi, n=6)\n\n# View the last 10 rows\ntail(bmi, n=10)\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nAfghanistan\n21.48678\n21.46552\n21.45145\n21.43822\n21.42734\n21.41222\n21.40132\n21.37679\n21.34018\n...\n20.75469\n20.69521\n20.62643\n20.59848\n20.58706\n20.57759\n20.58084\n20.58749\n20.60246\n20.62058\n\n\nAlbania\n25.22533\n25.23981\n25.25636\n25.27176\n25.27901\n25.28669\n25.29451\n25.30217\n25.30450\n...\n25.46555\n25.55835\n25.66701\n25.77167\n25.87274\n25.98136\n26.08939\n26.20867\n26.32753\n26.44657\n\n\nAlgeria\n22.25703\n22.34745\n22.43647\n22.52105\n22.60633\n22.69501\n22.76979\n22.84096\n22.90644\n...\n23.69486\n23.77659\n23.86256\n23.95294\n24.05243\n24.15957\n24.27001\n24.38270\n24.48846\n24.59620\n\n\nAndorra\n25.66652\n25.70868\n25.74681\n25.78250\n25.81874\n25.85236\n25.89089\n25.93414\n25.98477\n...\n26.75078\n26.83179\n26.92373\n27.02525\n27.12481\n27.23107\n27.32827\n27.43588\n27.53363\n27.63048\n\n\nAngola\n20.94876\n20.94371\n20.93754\n20.93187\n20.93569\n20.94857\n20.96030\n20.98025\n21.01375\n...\n21.31954\n21.37480\n21.43664\n21.51765\n21.59924\n21.69218\n21.80564\n21.93881\n22.08962\n22.25083\n\n\nAntigua and Barbuda\n23.31424\n23.39054\n23.45883\n23.53735\n23.63584\n23.73109\n23.83449\n23.93649\n24.05364\n...\n24.91721\n24.99158\n25.05857\n25.13039\n25.20713\n25.29898\n25.39965\n25.51382\n25.64247\n25.76602\n\n\n\n\n\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nAfghanistan\n21.48678\n21.46552\n21.45145\n21.43822\n21.42734\n21.41222\n21.40132\n21.37679\n21.34018\n...\n20.75469\n20.69521\n20.62643\n20.59848\n20.58706\n20.57759\n20.58084\n20.58749\n20.60246\n20.62058\n\n\nAlbania\n25.22533\n25.23981\n25.25636\n25.27176\n25.27901\n25.28669\n25.29451\n25.30217\n25.30450\n...\n25.46555\n25.55835\n25.66701\n25.77167\n25.87274\n25.98136\n26.08939\n26.20867\n26.32753\n26.44657\n\n\nAlgeria\n22.25703\n22.34745\n22.43647\n22.52105\n22.60633\n22.69501\n22.76979\n22.84096\n22.90644\n...\n23.69486\n23.77659\n23.86256\n23.95294\n24.05243\n24.15957\n24.27001\n24.38270\n24.48846\n24.59620\n\n\nAndorra\n25.66652\n25.70868\n25.74681\n25.78250\n25.81874\n25.85236\n25.89089\n25.93414\n25.98477\n...\n26.75078\n26.83179\n26.92373\n27.02525\n27.12481\n27.23107\n27.32827\n27.43588\n27.53363\n27.63048\n\n\nAngola\n20.94876\n20.94371\n20.93754\n20.93187\n20.93569\n20.94857\n20.96030\n20.98025\n21.01375\n...\n21.31954\n21.37480\n21.43664\n21.51765\n21.59924\n21.69218\n21.80564\n21.93881\n22.08962\n22.25083\n\n\nAntigua and Barbuda\n23.31424\n23.39054\n23.45883\n23.53735\n23.63584\n23.73109\n23.83449\n23.93649\n24.05364\n...\n24.91721\n24.99158\n25.05857\n25.13039\n25.20713\n25.29898\n25.39965\n25.51382\n25.64247\n25.76602\n\n\nArgentina\n25.37913\n25.44951\n25.50242\n25.55644\n25.61271\n25.66593\n25.72364\n25.78529\n25.84428\n...\n26.79005\n26.88103\n26.96067\n26.99882\n27.04738\n27.11001\n27.18941\n27.28179\n27.38889\n27.50170\n\n\nArmenia\n23.82469\n23.86401\n23.91023\n23.95649\n24.00181\n24.04083\n24.08736\n24.13334\n24.17219\n...\n24.11699\n24.18045\n24.26670\n24.37698\n24.50332\n24.64178\n24.81447\n24.99160\n25.17590\n25.35542\n\n\nAustralia\n24.92729\n25.00216\n25.07660\n25.14938\n25.22894\n25.31849\n25.41017\n25.50528\n25.60001\n...\n26.65506\n26.74486\n26.84397\n26.93858\n27.03801\n27.13871\n27.24614\n27.35267\n27.45878\n27.56373\n\n\nAustria\n24.84097\n24.88110\n24.93482\n24.98118\n25.02208\n25.06015\n25.10680\n25.14747\n25.19333\n...\n25.81773\n25.87471\n25.93806\n25.99583\n26.06356\n26.14360\n26.21107\n26.29374\n26.38136\n26.46741\n\n\nAzerbaijan\n24.49375\n24.52584\n24.56064\n24.60150\n24.64121\n24.67566\n24.71906\n24.75799\n24.78894\n...\n24.47842\n24.51287\n24.57202\n24.66021\n24.77164\n24.89376\n25.06256\n25.25706\n25.45513\n25.65117\n\n\nBahamas\n24.21064\n24.30814\n24.42750\n24.54415\n24.66558\n24.78408\n24.90724\n25.03166\n25.14778\n...\n26.12080\n26.25748\n26.38653\n26.51184\n26.62607\n26.75612\n26.88517\n27.00715\n27.12653\n27.24594\n\n\nBahrain\n23.97588\n24.09045\n24.20617\n24.32335\n24.43174\n24.53684\n24.63328\n24.74914\n24.86604\n...\n26.50245\n26.65409\n26.80388\n26.94923\n27.09298\n27.23908\n27.38693\n27.53868\n27.68865\n27.83721\n\n\nBangladesh\n20.51918\n20.47766\n20.43741\n20.40075\n20.36524\n20.32983\n20.29654\n20.26401\n20.23497\n...\n20.13361\n20.14774\n20.16802\n20.18621\n20.20948\n20.23957\n20.27648\n20.31554\n20.35493\n20.39742\n\n\nBarbados\n24.36372\n24.43455\n24.49314\n24.54713\n24.59913\n24.64998\n24.71728\n24.77976\n24.84265\n...\n25.51681\n25.60292\n25.68910\n25.77615\n25.87020\n25.95660\n26.06074\n26.16874\n26.27575\n26.38439\n\n\n\n\n\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nVenezuela\n24.58052\n24.69666\n24.80082\n24.89208\n24.98440\n25.07104\n25.15587\n25.24624\n25.35274\n...\n26.50035\n26.61021\n26.71688\n26.79210\n26.85498\n26.95162\n27.05633\n27.17698\n27.30849\n27.44500\n\n\nVietnam\n19.01394\n19.03902\n19.06804\n19.09675\n19.13046\n19.16397\n19.19740\n19.23481\n19.27090\n...\n20.02081\n20.10343\n20.18623\n20.27145\n20.36402\n20.46585\n20.57277\n20.68655\n20.80189\n20.91630\n\n\nWest Bank and Gaza\n24.31624\n24.40192\n24.48713\n24.57107\n24.65582\n24.74148\n24.82984\n24.91615\n25.00108\n...\n26.28240\n26.39074\n26.45700\n26.48925\n26.51152\n26.52924\n26.54329\n26.54449\n26.55460\n26.57750\n\n\nYemen, Rep.\n22.90384\n22.96813\n23.02669\n23.07279\n23.12566\n23.16944\n23.20933\n23.25043\n23.29401\n...\n23.85482\n23.92467\n23.99129\n24.05692\n24.12459\n24.19204\n24.25638\n24.32120\n24.37949\n24.44157\n\n\nZambia\n19.66295\n19.69512\n19.72538\n19.75420\n19.78070\n19.80335\n19.82396\n19.85065\n19.88320\n...\n20.15094\n20.17261\n20.20266\n20.24298\n20.29474\n20.35966\n20.43398\n20.51422\n20.59770\n20.68321\n\n\nZimbabwe\n21.46989\n21.48867\n21.50738\n21.52936\n21.53383\n21.54341\n21.54859\n21.54590\n21.55396\n...\n21.68873\n21.72652\n21.76514\n21.79645\n21.82499\n21.85806\n21.89495\n21.93371\n21.97405\n22.02660\n\n\n\n\n\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nUnited States\n25.46406\n25.57524\n25.67883\n25.78812\n25.90690\n26.02568\n26.13740\n26.25939\n26.37687\n...\n27.60386\n27.71039\n27.80569\n27.90479\n28.00041\n28.10039\n28.19703\n28.28959\n28.37574\n28.45698\n\n\nUruguay\n24.24001\n24.31948\n24.39260\n24.44209\n24.49525\n24.54516\n24.59804\n24.67024\n24.73972\n...\n25.78625\n25.86898\n25.93469\n25.96627\n26.00585\n26.06073\n26.13136\n26.20624\n26.29256\n26.39123\n\n\nUzbekistan\n24.56500\n24.60077\n24.62187\n24.64780\n24.66890\n24.69832\n24.72305\n24.74603\n24.77115\n...\n24.72082\n24.75326\n24.79418\n24.83998\n24.88965\n24.95455\n25.03331\n25.12717\n25.22226\n25.32054\n\n\nVanuatu\n23.20701\n23.32990\n23.46016\n23.60431\n23.75134\n23.89466\n24.03171\n24.15571\n24.27529\n...\n25.72398\n25.85208\n25.96032\n26.05661\n26.16060\n26.27087\n26.38887\n26.51376\n26.64903\n26.78926\n\n\nVenezuela\n24.58052\n24.69666\n24.80082\n24.89208\n24.98440\n25.07104\n25.15587\n25.24624\n25.35274\n...\n26.50035\n26.61021\n26.71688\n26.79210\n26.85498\n26.95162\n27.05633\n27.17698\n27.30849\n27.44500\n\n\nVietnam\n19.01394\n19.03902\n19.06804\n19.09675\n19.13046\n19.16397\n19.19740\n19.23481\n19.27090\n...\n20.02081\n20.10343\n20.18623\n20.27145\n20.36402\n20.46585\n20.57277\n20.68655\n20.80189\n20.91630\n\n\nWest Bank and Gaza\n24.31624\n24.40192\n24.48713\n24.57107\n24.65582\n24.74148\n24.82984\n24.91615\n25.00108\n...\n26.28240\n26.39074\n26.45700\n26.48925\n26.51152\n26.52924\n26.54329\n26.54449\n26.55460\n26.57750\n\n\nYemen, Rep.\n22.90384\n22.96813\n23.02669\n23.07279\n23.12566\n23.16944\n23.20933\n23.25043\n23.29401\n...\n23.85482\n23.92467\n23.99129\n24.05692\n24.12459\n24.19204\n24.25638\n24.32120\n24.37949\n24.44157\n\n\nZambia\n19.66295\n19.69512\n19.72538\n19.75420\n19.78070\n19.80335\n19.82396\n19.85065\n19.88320\n...\n20.15094\n20.17261\n20.20266\n20.24298\n20.29474\n20.35966\n20.43398\n20.51422\n20.59770\n20.68321\n\n\nZimbabwe\n21.46989\n21.48867\n21.50738\n21.52936\n21.53383\n21.54341\n21.54859\n21.54590\n21.55396\n...\n21.68873\n21.72652\n21.76514\n21.79645\n21.82499\n21.85806\n21.89495\n21.93371\n21.97405\n22.02660\n\n\n\n\n\n\n\n\n\n\n# Histogram of BMIs from 2008\nhist(bmi$Y2008)\n\n# Scatter plot comparing BMIs from 1980 to those from 2008\nplot(bmi$Y1980, bmi$Y2008)"
  },
  {
    "objectID": "posts/2020-10-19-cleaning data in r.html#exploring-raw-data",
    "href": "posts/2020-10-19-cleaning data in r.html#exploring-raw-data",
    "title": "Introduction and Exproling Raw data",
    "section": "",
    "text": "library(readr)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(installr)\n\nWarning message:\n\"package 'stringr' was built under R version 3.6.3\"Warning message:\n\"package 'installr' was built under R version 3.6.3\"\nWelcome to installr version 0.22.0\n\nMore information is available on the installr project website:\nhttps://github.com/talgalili/installr/\n\nContact: &lt;tal.galili@gmail.com&gt;\nSuggestions and bug-reports can be submitted at: https://github.com/talgalili/installr/issues\n\n            To suppress this message use:\n            suppressPackageStartupMessages(library(installr))\n\n\n\n\nweather = readRDS(gzcon(url('https://assets.datacamp.com/production/repositories/34/datasets/b3c1036d9a60a9dfe0f99051d2474a54f76055ea/weather.rds')))\n\n\nclass(weather)\n\n'data.frame'\n\n\n\nhead(weather)\n\n\n\n\n\nX\nyear\nmonth\nmeasure\nX1\nX2\nX3\nX4\nX5\nX6\n...\nX22\nX23\nX24\nX25\nX26\nX27\nX28\nX29\nX30\nX31\n\n\n\n\n1\n2014\n12\nMax.TemperatureF\n64\n42\n51\n43\n42\n45\n...\n44\n47\n46\n59\n50\n52\n52\n41\n30\n30\n\n\n2\n2014\n12\nMean.TemperatureF\n52\n38\n44\n37\n34\n42\n...\n39\n45\n44\n52\n44\n45\n46\n36\n26\n25\n\n\n3\n2014\n12\nMin.TemperatureF\n39\n33\n37\n30\n26\n38\n...\n33\n42\n41\n44\n37\n38\n40\n30\n22\n20\n\n\n4\n2014\n12\nMax.Dew.PointF\n46\n40\n49\n24\n37\n45\n...\n39\n45\n46\n58\n31\n34\n42\n26\n10\n8\n\n\n5\n2014\n12\nMeanDew.PointF\n40\n27\n42\n21\n25\n40\n...\n34\n42\n44\n43\n29\n31\n35\n20\n4\n5\n\n\n6\n2014\n12\nMin.DewpointF\n26\n17\n24\n13\n12\n36\n...\n25\n37\n41\n29\n28\n29\n27\n10\n-6\n1\n\n\n\n\n\n\n\ntail(weather)\n\n\n\n\n\n\nX\nyear\nmonth\nmeasure\nX1\nX2\nX3\nX4\nX5\nX6\n...\nX22\nX23\nX24\nX25\nX26\nX27\nX28\nX29\nX30\nX31\n\n\n\n\n281\n281\n2015\n12\nMean.Wind.SpeedMPH\n6\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n282\n282\n2015\n12\nMax.Gust.SpeedMPH\n17\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n283\n283\n2015\n12\nPrecipitationIn\n0.14\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n284\n284\n2015\n12\nCloudCover\n7\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n285\n285\n2015\n12\nEvents\nRain\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n286\n286\n2015\n12\nWindDirDegrees\n109\nNA\nNA\nNA\nNA\nNA\n...\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\n\nstr(weather)\n\n'data.frame':   286 obs. of  35 variables:\n $ X      : int  1 2 3 4 5 6 7 8 9 10 ...\n $ year   : int  2014 2014 2014 2014 2014 2014 2014 2014 2014 2014 ...\n $ month  : int  12 12 12 12 12 12 12 12 12 12 ...\n $ measure: chr  \"Max.TemperatureF\" \"Mean.TemperatureF\" \"Min.TemperatureF\" \"Max.Dew.PointF\" ...\n $ X1     : chr  \"64\" \"52\" \"39\" \"46\" ...\n $ X2     : chr  \"42\" \"38\" \"33\" \"40\" ...\n $ X3     : chr  \"51\" \"44\" \"37\" \"49\" ...\n $ X4     : chr  \"43\" \"37\" \"30\" \"24\" ...\n $ X5     : chr  \"42\" \"34\" \"26\" \"37\" ...\n $ X6     : chr  \"45\" \"42\" \"38\" \"45\" ...\n $ X7     : chr  \"38\" \"30\" \"21\" \"36\" ...\n $ X8     : chr  \"29\" \"24\" \"18\" \"28\" ...\n $ X9     : chr  \"49\" \"39\" \"29\" \"49\" ...\n $ X10    : chr  \"48\" \"43\" \"38\" \"45\" ...\n $ X11    : chr  \"39\" \"36\" \"32\" \"37\" ...\n $ X12    : chr  \"39\" \"35\" \"31\" \"28\" ...\n $ X13    : chr  \"42\" \"37\" \"32\" \"28\" ...\n $ X14    : chr  \"45\" \"39\" \"33\" \"29\" ...\n $ X15    : chr  \"42\" \"37\" \"32\" \"33\" ...\n $ X16    : chr  \"44\" \"40\" \"35\" \"42\" ...\n $ X17    : chr  \"49\" \"45\" \"41\" \"46\" ...\n $ X18    : chr  \"44\" \"40\" \"36\" \"34\" ...\n $ X19    : chr  \"37\" \"33\" \"29\" \"25\" ...\n $ X20    : chr  \"36\" \"32\" \"27\" \"30\" ...\n $ X21    : chr  \"36\" \"33\" \"30\" \"30\" ...\n $ X22    : chr  \"44\" \"39\" \"33\" \"39\" ...\n $ X23    : chr  \"47\" \"45\" \"42\" \"45\" ...\n $ X24    : chr  \"46\" \"44\" \"41\" \"46\" ...\n $ X25    : chr  \"59\" \"52\" \"44\" \"58\" ...\n $ X26    : chr  \"50\" \"44\" \"37\" \"31\" ...\n $ X27    : chr  \"52\" \"45\" \"38\" \"34\" ...\n $ X28    : chr  \"52\" \"46\" \"40\" \"42\" ...\n $ X29    : chr  \"41\" \"36\" \"30\" \"26\" ...\n $ X30    : chr  \"30\" \"26\" \"22\" \"10\" ...\n $ X31    : chr  \"30\" \"25\" \"20\" \"8\" ...\n\n\n\ndim(weather)\n\n\n    286\n    35\n\n\n\n\nbmi=read_csv('https://assets.datacamp.com/production/repositories/34/datasets/a0a569ebbb34500d11979eba95360125127e6434/bmi_clean.csv')\n\nParsed with column specification:\ncols(\n  .default = col_double(),\n  Country = col_character()\n)\nSee spec(...) for full column specifications.\n\n\n\nclass(bmi)\n\n\n    'spec_tbl_df'\n    'tbl_df'\n    'tbl'\n    'data.frame'\n\n\n\n\ndim(bmi)\n\n\n    199\n    30\n\n\n\n\nhead(bmi)\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nAfghanistan\n21.48678\n21.46552\n21.45145\n21.43822\n21.42734\n21.41222\n21.40132\n21.37679\n21.34018\n...\n20.75469\n20.69521\n20.62643\n20.59848\n20.58706\n20.57759\n20.58084\n20.58749\n20.60246\n20.62058\n\n\nAlbania\n25.22533\n25.23981\n25.25636\n25.27176\n25.27901\n25.28669\n25.29451\n25.30217\n25.30450\n...\n25.46555\n25.55835\n25.66701\n25.77167\n25.87274\n25.98136\n26.08939\n26.20867\n26.32753\n26.44657\n\n\nAlgeria\n22.25703\n22.34745\n22.43647\n22.52105\n22.60633\n22.69501\n22.76979\n22.84096\n22.90644\n...\n23.69486\n23.77659\n23.86256\n23.95294\n24.05243\n24.15957\n24.27001\n24.38270\n24.48846\n24.59620\n\n\nAndorra\n25.66652\n25.70868\n25.74681\n25.78250\n25.81874\n25.85236\n25.89089\n25.93414\n25.98477\n...\n26.75078\n26.83179\n26.92373\n27.02525\n27.12481\n27.23107\n27.32827\n27.43588\n27.53363\n27.63048\n\n\nAngola\n20.94876\n20.94371\n20.93754\n20.93187\n20.93569\n20.94857\n20.96030\n20.98025\n21.01375\n...\n21.31954\n21.37480\n21.43664\n21.51765\n21.59924\n21.69218\n21.80564\n21.93881\n22.08962\n22.25083\n\n\nAntigua and Barbuda\n23.31424\n23.39054\n23.45883\n23.53735\n23.63584\n23.73109\n23.83449\n23.93649\n24.05364\n...\n24.91721\n24.99158\n25.05857\n25.13039\n25.20713\n25.29898\n25.39965\n25.51382\n25.64247\n25.76602\n\n\n\n\n\n\n\ntail(bmi)\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nVenezuela\n24.58052\n24.69666\n24.80082\n24.89208\n24.98440\n25.07104\n25.15587\n25.24624\n25.35274\n...\n26.50035\n26.61021\n26.71688\n26.79210\n26.85498\n26.95162\n27.05633\n27.17698\n27.30849\n27.44500\n\n\nVietnam\n19.01394\n19.03902\n19.06804\n19.09675\n19.13046\n19.16397\n19.19740\n19.23481\n19.27090\n...\n20.02081\n20.10343\n20.18623\n20.27145\n20.36402\n20.46585\n20.57277\n20.68655\n20.80189\n20.91630\n\n\nWest Bank and Gaza\n24.31624\n24.40192\n24.48713\n24.57107\n24.65582\n24.74148\n24.82984\n24.91615\n25.00108\n...\n26.28240\n26.39074\n26.45700\n26.48925\n26.51152\n26.52924\n26.54329\n26.54449\n26.55460\n26.57750\n\n\nYemen, Rep.\n22.90384\n22.96813\n23.02669\n23.07279\n23.12566\n23.16944\n23.20933\n23.25043\n23.29401\n...\n23.85482\n23.92467\n23.99129\n24.05692\n24.12459\n24.19204\n24.25638\n24.32120\n24.37949\n24.44157\n\n\nZambia\n19.66295\n19.69512\n19.72538\n19.75420\n19.78070\n19.80335\n19.82396\n19.85065\n19.88320\n...\n20.15094\n20.17261\n20.20266\n20.24298\n20.29474\n20.35966\n20.43398\n20.51422\n20.59770\n20.68321\n\n\nZimbabwe\n21.46989\n21.48867\n21.50738\n21.52936\n21.53383\n21.54341\n21.54859\n21.54590\n21.55396\n...\n21.68873\n21.72652\n21.76514\n21.79645\n21.82499\n21.85806\n21.89495\n21.93371\n21.97405\n22.02660\n\n\n\n\n\n\n\nstr(bmi)\n\ntibble [199 x 30] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Country: chr [1:199] \"Afghanistan\" \"Albania\" \"Algeria\" \"Andorra\" ...\n $ Y1980  : num [1:199] 21.5 25.2 22.3 25.7 20.9 ...\n $ Y1981  : num [1:199] 21.5 25.2 22.3 25.7 20.9 ...\n $ Y1982  : num [1:199] 21.5 25.3 22.4 25.7 20.9 ...\n $ Y1983  : num [1:199] 21.4 25.3 22.5 25.8 20.9 ...\n $ Y1984  : num [1:199] 21.4 25.3 22.6 25.8 20.9 ...\n $ Y1985  : num [1:199] 21.4 25.3 22.7 25.9 20.9 ...\n $ Y1986  : num [1:199] 21.4 25.3 22.8 25.9 21 ...\n $ Y1987  : num [1:199] 21.4 25.3 22.8 25.9 21 ...\n $ Y1988  : num [1:199] 21.3 25.3 22.9 26 21 ...\n $ Y1989  : num [1:199] 21.3 25.3 23 26 21.1 ...\n $ Y1990  : num [1:199] 21.2 25.3 23 26.1 21.1 ...\n $ Y1991  : num [1:199] 21.2 25.3 23.1 26.2 21.1 ...\n $ Y1992  : num [1:199] 21.1 25.2 23.2 26.2 21.1 ...\n $ Y1993  : num [1:199] 21.1 25.2 23.3 26.3 21.1 ...\n $ Y1994  : num [1:199] 21 25.2 23.3 26.4 21.1 ...\n $ Y1995  : num [1:199] 20.9 25.3 23.4 26.4 21.2 ...\n $ Y1996  : num [1:199] 20.9 25.3 23.5 26.5 21.2 ...\n $ Y1997  : num [1:199] 20.8 25.3 23.5 26.6 21.2 ...\n $ Y1998  : num [1:199] 20.8 25.4 23.6 26.7 21.3 ...\n $ Y1999  : num [1:199] 20.8 25.5 23.7 26.8 21.3 ...\n $ Y2000  : num [1:199] 20.7 25.6 23.8 26.8 21.4 ...\n $ Y2001  : num [1:199] 20.6 25.7 23.9 26.9 21.4 ...\n $ Y2002  : num [1:199] 20.6 25.8 24 27 21.5 ...\n $ Y2003  : num [1:199] 20.6 25.9 24.1 27.1 21.6 ...\n $ Y2004  : num [1:199] 20.6 26 24.2 27.2 21.7 ...\n $ Y2005  : num [1:199] 20.6 26.1 24.3 27.3 21.8 ...\n $ Y2006  : num [1:199] 20.6 26.2 24.4 27.4 21.9 ...\n $ Y2007  : num [1:199] 20.6 26.3 24.5 27.5 22.1 ...\n $ Y2008  : num [1:199] 20.6 26.4 24.6 27.6 22.3 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Country = col_character(),\n  ..   Y1980 = col_double(),\n  ..   Y1981 = col_double(),\n  ..   Y1982 = col_double(),\n  ..   Y1983 = col_double(),\n  ..   Y1984 = col_double(),\n  ..   Y1985 = col_double(),\n  ..   Y1986 = col_double(),\n  ..   Y1987 = col_double(),\n  ..   Y1988 = col_double(),\n  ..   Y1989 = col_double(),\n  ..   Y1990 = col_double(),\n  ..   Y1991 = col_double(),\n  ..   Y1992 = col_double(),\n  ..   Y1993 = col_double(),\n  ..   Y1994 = col_double(),\n  ..   Y1995 = col_double(),\n  ..   Y1996 = col_double(),\n  ..   Y1997 = col_double(),\n  ..   Y1998 = col_double(),\n  ..   Y1999 = col_double(),\n  ..   Y2000 = col_double(),\n  ..   Y2001 = col_double(),\n  ..   Y2002 = col_double(),\n  ..   Y2003 = col_double(),\n  ..   Y2004 = col_double(),\n  ..   Y2005 = col_double(),\n  ..   Y2006 = col_double(),\n  ..   Y2007 = col_double(),\n  ..   Y2008 = col_double()\n  .. )\n\n\n\nglimpse(bmi)\n\nRows: 199\nColumns: 30\n$ Country &lt;chr&gt; \"Afghanistan\", \"Albania\", \"Algeria\", \"Andorra\", \"Angola\", \"...\n$ Y1980   &lt;dbl&gt; 21.48678, 25.22533, 22.25703, 25.66652, 20.94876, 23.31424,...\n$ Y1981   &lt;dbl&gt; 21.46552, 25.23981, 22.34745, 25.70868, 20.94371, 23.39054,...\n$ Y1982   &lt;dbl&gt; 21.45145, 25.25636, 22.43647, 25.74681, 20.93754, 23.45883,...\n$ Y1983   &lt;dbl&gt; 21.43822, 25.27176, 22.52105, 25.78250, 20.93187, 23.53735,...\n$ Y1984   &lt;dbl&gt; 21.42734, 25.27901, 22.60633, 25.81874, 20.93569, 23.63584,...\n$ Y1985   &lt;dbl&gt; 21.41222, 25.28669, 22.69501, 25.85236, 20.94857, 23.73109,...\n$ Y1986   &lt;dbl&gt; 21.40132, 25.29451, 22.76979, 25.89089, 20.96030, 23.83449,...\n$ Y1987   &lt;dbl&gt; 21.37679, 25.30217, 22.84096, 25.93414, 20.98025, 23.93649,...\n$ Y1988   &lt;dbl&gt; 21.34018, 25.30450, 22.90644, 25.98477, 21.01375, 24.05364,...\n$ Y1989   &lt;dbl&gt; 21.29845, 25.31944, 22.97931, 26.04450, 21.05269, 24.16347,...\n$ Y1990   &lt;dbl&gt; 21.24818, 25.32357, 23.04600, 26.10936, 21.09007, 24.26782,...\n$ Y1991   &lt;dbl&gt; 21.20269, 25.28452, 23.11333, 26.17912, 21.12136, 24.36568,...\n$ Y1992   &lt;dbl&gt; 21.14238, 25.23077, 23.18776, 26.24017, 21.14987, 24.45644,...\n$ Y1993   &lt;dbl&gt; 21.06376, 25.21192, 23.25764, 26.30356, 21.13938, 24.54096,...\n$ Y1994   &lt;dbl&gt; 20.97987, 25.22115, 23.32273, 26.36793, 21.14186, 24.60945,...\n$ Y1995   &lt;dbl&gt; 20.91132, 25.25874, 23.39526, 26.43569, 21.16022, 24.66461,...\n$ Y1996   &lt;dbl&gt; 20.85155, 25.31097, 23.46811, 26.50769, 21.19076, 24.72544,...\n$ Y1997   &lt;dbl&gt; 20.81307, 25.33988, 23.54160, 26.58255, 21.22621, 24.78714,...\n$ Y1998   &lt;dbl&gt; 20.78591, 25.39116, 23.61592, 26.66337, 21.27082, 24.84936,...\n$ Y1999   &lt;dbl&gt; 20.75469, 25.46555, 23.69486, 26.75078, 21.31954, 24.91721,...\n$ Y2000   &lt;dbl&gt; 20.69521, 25.55835, 23.77659, 26.83179, 21.37480, 24.99158,...\n$ Y2001   &lt;dbl&gt; 20.62643, 25.66701, 23.86256, 26.92373, 21.43664, 25.05857,...\n$ Y2002   &lt;dbl&gt; 20.59848, 25.77167, 23.95294, 27.02525, 21.51765, 25.13039,...\n$ Y2003   &lt;dbl&gt; 20.58706, 25.87274, 24.05243, 27.12481, 21.59924, 25.20713,...\n$ Y2004   &lt;dbl&gt; 20.57759, 25.98136, 24.15957, 27.23107, 21.69218, 25.29898,...\n$ Y2005   &lt;dbl&gt; 20.58084, 26.08939, 24.27001, 27.32827, 21.80564, 25.39965,...\n$ Y2006   &lt;dbl&gt; 20.58749, 26.20867, 24.38270, 27.43588, 21.93881, 25.51382,...\n$ Y2007   &lt;dbl&gt; 20.60246, 26.32753, 24.48846, 27.53363, 22.08962, 25.64247,...\n$ Y2008   &lt;dbl&gt; 20.62058, 26.44657, 24.59620, 27.63048, 22.25083, 25.76602,...\n\n\n\n# View the first 6 rows\nhead(bmi, n=6)\n\n# View the first 15 rows\nhead(bmi, n=15)\n\n# View the last 6 rows\ntail(bmi, n=6)\n\n# View the last 10 rows\ntail(bmi, n=10)\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nAfghanistan\n21.48678\n21.46552\n21.45145\n21.43822\n21.42734\n21.41222\n21.40132\n21.37679\n21.34018\n...\n20.75469\n20.69521\n20.62643\n20.59848\n20.58706\n20.57759\n20.58084\n20.58749\n20.60246\n20.62058\n\n\nAlbania\n25.22533\n25.23981\n25.25636\n25.27176\n25.27901\n25.28669\n25.29451\n25.30217\n25.30450\n...\n25.46555\n25.55835\n25.66701\n25.77167\n25.87274\n25.98136\n26.08939\n26.20867\n26.32753\n26.44657\n\n\nAlgeria\n22.25703\n22.34745\n22.43647\n22.52105\n22.60633\n22.69501\n22.76979\n22.84096\n22.90644\n...\n23.69486\n23.77659\n23.86256\n23.95294\n24.05243\n24.15957\n24.27001\n24.38270\n24.48846\n24.59620\n\n\nAndorra\n25.66652\n25.70868\n25.74681\n25.78250\n25.81874\n25.85236\n25.89089\n25.93414\n25.98477\n...\n26.75078\n26.83179\n26.92373\n27.02525\n27.12481\n27.23107\n27.32827\n27.43588\n27.53363\n27.63048\n\n\nAngola\n20.94876\n20.94371\n20.93754\n20.93187\n20.93569\n20.94857\n20.96030\n20.98025\n21.01375\n...\n21.31954\n21.37480\n21.43664\n21.51765\n21.59924\n21.69218\n21.80564\n21.93881\n22.08962\n22.25083\n\n\nAntigua and Barbuda\n23.31424\n23.39054\n23.45883\n23.53735\n23.63584\n23.73109\n23.83449\n23.93649\n24.05364\n...\n24.91721\n24.99158\n25.05857\n25.13039\n25.20713\n25.29898\n25.39965\n25.51382\n25.64247\n25.76602\n\n\n\n\n\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nAfghanistan\n21.48678\n21.46552\n21.45145\n21.43822\n21.42734\n21.41222\n21.40132\n21.37679\n21.34018\n...\n20.75469\n20.69521\n20.62643\n20.59848\n20.58706\n20.57759\n20.58084\n20.58749\n20.60246\n20.62058\n\n\nAlbania\n25.22533\n25.23981\n25.25636\n25.27176\n25.27901\n25.28669\n25.29451\n25.30217\n25.30450\n...\n25.46555\n25.55835\n25.66701\n25.77167\n25.87274\n25.98136\n26.08939\n26.20867\n26.32753\n26.44657\n\n\nAlgeria\n22.25703\n22.34745\n22.43647\n22.52105\n22.60633\n22.69501\n22.76979\n22.84096\n22.90644\n...\n23.69486\n23.77659\n23.86256\n23.95294\n24.05243\n24.15957\n24.27001\n24.38270\n24.48846\n24.59620\n\n\nAndorra\n25.66652\n25.70868\n25.74681\n25.78250\n25.81874\n25.85236\n25.89089\n25.93414\n25.98477\n...\n26.75078\n26.83179\n26.92373\n27.02525\n27.12481\n27.23107\n27.32827\n27.43588\n27.53363\n27.63048\n\n\nAngola\n20.94876\n20.94371\n20.93754\n20.93187\n20.93569\n20.94857\n20.96030\n20.98025\n21.01375\n...\n21.31954\n21.37480\n21.43664\n21.51765\n21.59924\n21.69218\n21.80564\n21.93881\n22.08962\n22.25083\n\n\nAntigua and Barbuda\n23.31424\n23.39054\n23.45883\n23.53735\n23.63584\n23.73109\n23.83449\n23.93649\n24.05364\n...\n24.91721\n24.99158\n25.05857\n25.13039\n25.20713\n25.29898\n25.39965\n25.51382\n25.64247\n25.76602\n\n\nArgentina\n25.37913\n25.44951\n25.50242\n25.55644\n25.61271\n25.66593\n25.72364\n25.78529\n25.84428\n...\n26.79005\n26.88103\n26.96067\n26.99882\n27.04738\n27.11001\n27.18941\n27.28179\n27.38889\n27.50170\n\n\nArmenia\n23.82469\n23.86401\n23.91023\n23.95649\n24.00181\n24.04083\n24.08736\n24.13334\n24.17219\n...\n24.11699\n24.18045\n24.26670\n24.37698\n24.50332\n24.64178\n24.81447\n24.99160\n25.17590\n25.35542\n\n\nAustralia\n24.92729\n25.00216\n25.07660\n25.14938\n25.22894\n25.31849\n25.41017\n25.50528\n25.60001\n...\n26.65506\n26.74486\n26.84397\n26.93858\n27.03801\n27.13871\n27.24614\n27.35267\n27.45878\n27.56373\n\n\nAustria\n24.84097\n24.88110\n24.93482\n24.98118\n25.02208\n25.06015\n25.10680\n25.14747\n25.19333\n...\n25.81773\n25.87471\n25.93806\n25.99583\n26.06356\n26.14360\n26.21107\n26.29374\n26.38136\n26.46741\n\n\nAzerbaijan\n24.49375\n24.52584\n24.56064\n24.60150\n24.64121\n24.67566\n24.71906\n24.75799\n24.78894\n...\n24.47842\n24.51287\n24.57202\n24.66021\n24.77164\n24.89376\n25.06256\n25.25706\n25.45513\n25.65117\n\n\nBahamas\n24.21064\n24.30814\n24.42750\n24.54415\n24.66558\n24.78408\n24.90724\n25.03166\n25.14778\n...\n26.12080\n26.25748\n26.38653\n26.51184\n26.62607\n26.75612\n26.88517\n27.00715\n27.12653\n27.24594\n\n\nBahrain\n23.97588\n24.09045\n24.20617\n24.32335\n24.43174\n24.53684\n24.63328\n24.74914\n24.86604\n...\n26.50245\n26.65409\n26.80388\n26.94923\n27.09298\n27.23908\n27.38693\n27.53868\n27.68865\n27.83721\n\n\nBangladesh\n20.51918\n20.47766\n20.43741\n20.40075\n20.36524\n20.32983\n20.29654\n20.26401\n20.23497\n...\n20.13361\n20.14774\n20.16802\n20.18621\n20.20948\n20.23957\n20.27648\n20.31554\n20.35493\n20.39742\n\n\nBarbados\n24.36372\n24.43455\n24.49314\n24.54713\n24.59913\n24.64998\n24.71728\n24.77976\n24.84265\n...\n25.51681\n25.60292\n25.68910\n25.77615\n25.87020\n25.95660\n26.06074\n26.16874\n26.27575\n26.38439\n\n\n\n\n\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nVenezuela\n24.58052\n24.69666\n24.80082\n24.89208\n24.98440\n25.07104\n25.15587\n25.24624\n25.35274\n...\n26.50035\n26.61021\n26.71688\n26.79210\n26.85498\n26.95162\n27.05633\n27.17698\n27.30849\n27.44500\n\n\nVietnam\n19.01394\n19.03902\n19.06804\n19.09675\n19.13046\n19.16397\n19.19740\n19.23481\n19.27090\n...\n20.02081\n20.10343\n20.18623\n20.27145\n20.36402\n20.46585\n20.57277\n20.68655\n20.80189\n20.91630\n\n\nWest Bank and Gaza\n24.31624\n24.40192\n24.48713\n24.57107\n24.65582\n24.74148\n24.82984\n24.91615\n25.00108\n...\n26.28240\n26.39074\n26.45700\n26.48925\n26.51152\n26.52924\n26.54329\n26.54449\n26.55460\n26.57750\n\n\nYemen, Rep.\n22.90384\n22.96813\n23.02669\n23.07279\n23.12566\n23.16944\n23.20933\n23.25043\n23.29401\n...\n23.85482\n23.92467\n23.99129\n24.05692\n24.12459\n24.19204\n24.25638\n24.32120\n24.37949\n24.44157\n\n\nZambia\n19.66295\n19.69512\n19.72538\n19.75420\n19.78070\n19.80335\n19.82396\n19.85065\n19.88320\n...\n20.15094\n20.17261\n20.20266\n20.24298\n20.29474\n20.35966\n20.43398\n20.51422\n20.59770\n20.68321\n\n\nZimbabwe\n21.46989\n21.48867\n21.50738\n21.52936\n21.53383\n21.54341\n21.54859\n21.54590\n21.55396\n...\n21.68873\n21.72652\n21.76514\n21.79645\n21.82499\n21.85806\n21.89495\n21.93371\n21.97405\n22.02660\n\n\n\n\n\n\n\n\n\n\nCountry\nY1980\nY1981\nY1982\nY1983\nY1984\nY1985\nY1986\nY1987\nY1988\n...\nY1999\nY2000\nY2001\nY2002\nY2003\nY2004\nY2005\nY2006\nY2007\nY2008\n\n\n\n\nUnited States\n25.46406\n25.57524\n25.67883\n25.78812\n25.90690\n26.02568\n26.13740\n26.25939\n26.37687\n...\n27.60386\n27.71039\n27.80569\n27.90479\n28.00041\n28.10039\n28.19703\n28.28959\n28.37574\n28.45698\n\n\nUruguay\n24.24001\n24.31948\n24.39260\n24.44209\n24.49525\n24.54516\n24.59804\n24.67024\n24.73972\n...\n25.78625\n25.86898\n25.93469\n25.96627\n26.00585\n26.06073\n26.13136\n26.20624\n26.29256\n26.39123\n\n\nUzbekistan\n24.56500\n24.60077\n24.62187\n24.64780\n24.66890\n24.69832\n24.72305\n24.74603\n24.77115\n...\n24.72082\n24.75326\n24.79418\n24.83998\n24.88965\n24.95455\n25.03331\n25.12717\n25.22226\n25.32054\n\n\nVanuatu\n23.20701\n23.32990\n23.46016\n23.60431\n23.75134\n23.89466\n24.03171\n24.15571\n24.27529\n...\n25.72398\n25.85208\n25.96032\n26.05661\n26.16060\n26.27087\n26.38887\n26.51376\n26.64903\n26.78926\n\n\nVenezuela\n24.58052\n24.69666\n24.80082\n24.89208\n24.98440\n25.07104\n25.15587\n25.24624\n25.35274\n...\n26.50035\n26.61021\n26.71688\n26.79210\n26.85498\n26.95162\n27.05633\n27.17698\n27.30849\n27.44500\n\n\nVietnam\n19.01394\n19.03902\n19.06804\n19.09675\n19.13046\n19.16397\n19.19740\n19.23481\n19.27090\n...\n20.02081\n20.10343\n20.18623\n20.27145\n20.36402\n20.46585\n20.57277\n20.68655\n20.80189\n20.91630\n\n\nWest Bank and Gaza\n24.31624\n24.40192\n24.48713\n24.57107\n24.65582\n24.74148\n24.82984\n24.91615\n25.00108\n...\n26.28240\n26.39074\n26.45700\n26.48925\n26.51152\n26.52924\n26.54329\n26.54449\n26.55460\n26.57750\n\n\nYemen, Rep.\n22.90384\n22.96813\n23.02669\n23.07279\n23.12566\n23.16944\n23.20933\n23.25043\n23.29401\n...\n23.85482\n23.92467\n23.99129\n24.05692\n24.12459\n24.19204\n24.25638\n24.32120\n24.37949\n24.44157\n\n\nZambia\n19.66295\n19.69512\n19.72538\n19.75420\n19.78070\n19.80335\n19.82396\n19.85065\n19.88320\n...\n20.15094\n20.17261\n20.20266\n20.24298\n20.29474\n20.35966\n20.43398\n20.51422\n20.59770\n20.68321\n\n\nZimbabwe\n21.46989\n21.48867\n21.50738\n21.52936\n21.53383\n21.54341\n21.54859\n21.54590\n21.55396\n...\n21.68873\n21.72652\n21.76514\n21.79645\n21.82499\n21.85806\n21.89495\n21.93371\n21.97405\n22.02660\n\n\n\n\n\n\n\n\n\n\n# Histogram of BMIs from 2008\nhist(bmi$Y2008)\n\n# Scatter plot comparing BMIs from 1980 to those from 2008\nplot(bmi$Y1980, bmi$Y2008)"
  },
  {
    "objectID": "posts/2020-10-19-cleaning data in r.html#introduction-to-tidy-data",
    "href": "posts/2020-10-19-cleaning data in r.html#introduction-to-tidy-data",
    "title": "Introduction and Exproling Raw data",
    "section": "Introduction to tidy data",
    "text": "Introduction to tidy data\nin bmi, All of the year column names could be expressed as values of a new variable called year.\n\nGathering columns into key-value pairs\nThe most important function in tidyr is gather(). It should be used when you have columns that are not variables and you want to collapse them into key-value pairs.\nThe easiest way to visualize the effect of gather() is that it makes wide datasets long. Running the following command on wide_df will make it long:\ngather(wide_df, my_key, my_val, -col)\n\n\nSpreading key-value pairs into columns\nThe opposite of gather() is spread(), which takes key-values pairs and spreads them across multiple columns. This is useful when values in a column should actually be column names (i.e. variables). It can also make data more compact and easier to read.\nThe easiest way to visualize the effect of spread() is that it makes long datasets wide. As you saw in the video, running the following command will make long_df wide:\nspread(long_df, my_key, my_val)\n\n\nSeparating columns\nThe separate() function allows you to separate one column into multiple columns. Unless you tell it otherwise, it will attempt to separate on any character that is not a letter or number. You can also specify a specific separator using the sep argument.\ntreatments dataset obeys the principles of tidy data, but we’d like to split the treatment dates into two separate columns: year and month. This can be accomplished with the following:\nseparate(treatments, year_mo, c(\"year\", \"month\"))\n\n\nUniting columns\nThe opposite of separate() is unite(), which takes multiple columns and pastes them together. By default, the contents of the columns will be separated by underscores in the new column, but this behavior can be altered via the sep argument.\ntreatments but this time the year_mo column has been separated into year and month. The original column can be recreated by putting year and month back together:\nunite(treatments, year_mo, year, month)\n\n\nColumn headers are values, not variable names\nYou saw earlier, how we sometimes come across datasets where column names are actually values of a variable (e.g. months of the year). This is often the case when working with repeated measures data, where measurements are taken on subjects of interest on multiple occasions over time. The gather() function is helpful in these situations.\n\n\nVariables are stored in both rows and columns\nSometimes you’ll run into situations where variables are stored in both rows and columns. Although it may not be immediately obvious, if we treat the values in the type column as variables and create a separate column for each of them, we can set things straight. To do this, we use the spread() function.\n\n\nMultiple values are stored in one column\nIt’s also fairly common that you will find two variables stored in a single column of data. These variables may be joined by a separator like a dash, underscore, space, or forward slash.\nThe separate() function comes in handy in these situations. Keep in mind that the into argument, which specifies the names of the 2 new columns being formed, must be given as a character vector (e.g. c(\"column1\", \"column2\"))."
  },
  {
    "objectID": "posts/2020-10-19-cleaning data in r.html#string-manipulation",
    "href": "posts/2020-10-19-cleaning data in r.html#string-manipulation",
    "title": "Introduction and Exproling Raw data",
    "section": "String manipulation",
    "text": "String manipulation\n\nTrimming and padding strings\nOne common issue that comes up when cleaning data is the need to remove leading and/or trailing white space. The str_trim() function from stringr makes it easy to do this while leaving intact the part of the string that you actually want.\n&gt; str_trim(\"  this is a test     \")\n[1] \"this is a test\"\nA similar issue is when you need to pad strings to make them a certain number of characters wide. One example is if you had a bunch of employee ID numbers, some of which begin with one or more zeros. When reading these data in, you find that the leading zeros have been dropped somewhere along the way (probably because the variable was thought to be numeric and in that case, leading zeros would be unnecessary.)\n&gt; str_pad(\"24493\", width = 7, side = \"left\", pad = \"0\")\n[1] \"0024493\"\n\n# Load the stringr package\nlibrary(stringr)\n\n# Trim all leading and trailing whitespace\nstr_trim(c(\"   Filip \", \"Nick  \", \" Jonathan\"))\n\n# Pad these strings with leading zeros\nstr_pad(c(\"23485W\", \"8823453Q\", \"994Z\"), width=9, side='left', pad='0')\n\n\n    'Filip'\n    'Nick'\n    'Jonathan'\n\n\n\n\n    '00023485W'\n    '08823453Q'\n    '00000994Z'\n\n\n\n\nExamples like this are certainly handy in R. For example, the str_pad() function is useful when importing a dataset with US zip codes. Occasionally R will drop the leading 0 in a zipcode, thinking it’s numeric.\n\n\n\nUpper and lower case\nIn addition to trimming and padding strings, you may need to adjust their case from time to time. Making strings uppercase or lowercase is very straightforward in (base) R thanks to toupper() and tolower(). Each function takes exactly one argument: the character string (or vector/column of strings) to be converted to the desired case.\n\nstates &lt;- c(\"al\", \"ak\", \"az\", \"ar\", \"ca\", \"co\", \"ct\", \"de\", \"fl\", \"ga\", \"hi\", \"id\", \"il\", \"in\", \"ia\", \"ks\", \"ky\", \"la\", \"me\", \"md\", \"ma\", \"mi\", \"mn\", \"ms\", \"mo\", \"mt\", \"ne\", \"nv\", \"nh\", \"nj\", \"nm\", \"ny\", \"nc\", \"nd\", \"oh\", \"ok\", \"or\", \"pa\", \"ri\", \"sc\", \"sd\", \"tn\", \"tx\", \"ut\", \"vt\", \"va\", \"wa\", \"wv\", \"wi\", \"wy\")\n# Print state abbreviations\nstates\n\n# Make states all uppercase and save result to states_upper\nstates_upper &lt;- toupper(states)\nstates_upper \n\n# Make states_upper all lowercase again\ntolower(states_upper)\n\n\n    'al'\n    'ak'\n    'az'\n    'ar'\n    'ca'\n    'co'\n    'ct'\n    'de'\n    'fl'\n    'ga'\n    'hi'\n    'id'\n    'il'\n    'in'\n    'ia'\n    'ks'\n    'ky'\n    'la'\n    'me'\n    'md'\n    'ma'\n    'mi'\n    'mn'\n    'ms'\n    'mo'\n    'mt'\n    'ne'\n    'nv'\n    'nh'\n    'nj'\n    'nm'\n    'ny'\n    'nc'\n    'nd'\n    'oh'\n    'ok'\n    'or'\n    'pa'\n    'ri'\n    'sc'\n    'sd'\n    'tn'\n    'tx'\n    'ut'\n    'vt'\n    'va'\n    'wa'\n    'wv'\n    'wi'\n    'wy'\n\n\n\n\n    'AL'\n    'AK'\n    'AZ'\n    'AR'\n    'CA'\n    'CO'\n    'CT'\n    'DE'\n    'FL'\n    'GA'\n    'HI'\n    'ID'\n    'IL'\n    'IN'\n    'IA'\n    'KS'\n    'KY'\n    'LA'\n    'ME'\n    'MD'\n    'MA'\n    'MI'\n    'MN'\n    'MS'\n    'MO'\n    'MT'\n    'NE'\n    'NV'\n    'NH'\n    'NJ'\n    'NM'\n    'NY'\n    'NC'\n    'ND'\n    'OH'\n    'OK'\n    'OR'\n    'PA'\n    'RI'\n    'SC'\n    'SD'\n    'TN'\n    'TX'\n    'UT'\n    'VT'\n    'VA'\n    'WA'\n    'WV'\n    'WI'\n    'WY'\n\n\n\n\n    'al'\n    'ak'\n    'az'\n    'ar'\n    'ca'\n    'co'\n    'ct'\n    'de'\n    'fl'\n    'ga'\n    'hi'\n    'id'\n    'il'\n    'in'\n    'ia'\n    'ks'\n    'ky'\n    'la'\n    'me'\n    'md'\n    'ma'\n    'mi'\n    'mn'\n    'ms'\n    'mo'\n    'mt'\n    'ne'\n    'nv'\n    'nh'\n    'nj'\n    'nm'\n    'ny'\n    'nc'\n    'nd'\n    'oh'\n    'ok'\n    'or'\n    'pa'\n    'ri'\n    'sc'\n    'sd'\n    'tn'\n    'tx'\n    'ut'\n    'vt'\n    'va'\n    'wa'\n    'wv'\n    'wi'\n    'wy'\n\n\n\n\n\nFinding and replacing strings\nThe stringr package provides two functions that are very useful for finding and/or replacing patterns in strings: str_detect() and str_replace().\nLike all functions in stringr, the first argument of each is the string of interest. The second argument of each is the pattern of interest. In the case of str_detect(), this is the pattern we are searching for. In the case of str_replace(), this is the pattern we want to replace. Finally, str_replace() has a third argument, which is the string to replace with.\n&gt; str_detect(c(\"banana\", \"kiwi\"), \"a\")\n[1]  TRUE FALSE\n&gt; str_replace(c(\"banana\", \"kiwi\"), \"a\", \"o\")\n[1] \"bonana\" \"kiwi\"\n\n# Copy of students2: students3\nstudents3 &lt;- students\n\n# Look at the head of students3\nhead(students3)\n\n# Detect all dates of birth (dob) in 1997\nstr_detect(students3$dob, \"1997\")\n\n# In the sex column, replace \"F\" with \"Female\" ...\nstudents3$sex &lt;- str_replace(students3$sex, \"F\", \"Female\")\n\n# ... and \"M\" with \"Male\"\nstudents3$sex &lt;- str_replace(students3$sex, \"M\", \"Male\")\n\n# View the head of students3\nhead(students3)\n\n\n\n\n\nX1\nschool\nsex\ndob\naddress\nfamsize\nPstatus\nMedu\nFedu\nMjob\n...\nromantic\nfamrel\nfreetime\ngoout\nDalc\nWalc\nhealth\nnurse_visit\nabsences\nGrades\n\n\n\n\n1\nGP\nF\n2000-06-05\nU\nGT3\nA\n4\n4\nat_home\n...\nno\n4\n3\n4\n1\n1\n3\n2014-04-10 14:59:54\n6\n5/6/6\n\n\n2\nGP\nF\n1999-11-25\nU\nGT3\nT\n1\n1\nat_home\n...\nno\n5\n3\n3\n1\n1\n3\n2015-03-12 14:59:54\n4\n5/5/6\n\n\n3\nGP\nF\n1998-02-02\nU\nLE3\nT\n1\n1\nat_home\n...\nno\n4\n3\n2\n2\n3\n3\n2015-09-21 14:59:54\n10\n7/8/10\n\n\n4\nGP\nF\n1997-12-20\nU\nGT3\nT\n4\n2\nhealth\n...\nyes\n3\n2\n2\n1\n1\n5\n2015-09-03 14:59:54\n2\n15/14/15\n\n\n5\nGP\nF\n1998-10-04\nU\nGT3\nT\n3\n3\nother\n...\nno\n4\n3\n2\n1\n2\n5\n2015-04-07 14:59:54\n4\n6/10/10\n\n\n6\nGP\nM\n1999-06-16\nU\nLE3\nT\n4\n3\nservices\n...\nno\n5\n4\n2\n1\n2\n5\n2013-11-15 14:59:54\n10\n15/15/15\n\n\n\n\n\n\n\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    TRUE\n    TRUE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    TRUE\n    FALSE\n    TRUE\n    FALSE\n    TRUE\n    TRUE\n    FALSE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    TRUE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    TRUE\n    TRUE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    FALSE\n    TRUE\n    FALSE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    TRUE\n    TRUE\n    TRUE\n    TRUE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n    FALSE\n\n\n\n\n\n\n\nX1\nschool\nsex\ndob\naddress\nfamsize\nPstatus\nMedu\nFedu\nMjob\n...\nromantic\nfamrel\nfreetime\ngoout\nDalc\nWalc\nhealth\nnurse_visit\nabsences\nGrades\n\n\n\n\n1\nGP\nFemale\n2000-06-05\nU\nGT3\nA\n4\n4\nat_home\n...\nno\n4\n3\n4\n1\n1\n3\n2014-04-10 14:59:54\n6\n5/6/6\n\n\n2\nGP\nFemale\n1999-11-25\nU\nGT3\nT\n1\n1\nat_home\n...\nno\n5\n3\n3\n1\n1\n3\n2015-03-12 14:59:54\n4\n5/5/6\n\n\n3\nGP\nFemale\n1998-02-02\nU\nLE3\nT\n1\n1\nat_home\n...\nno\n4\n3\n2\n2\n3\n3\n2015-09-21 14:59:54\n10\n7/8/10\n\n\n4\nGP\nFemale\n1997-12-20\nU\nGT3\nT\n4\n2\nhealth\n...\nyes\n3\n2\n2\n1\n1\n5\n2015-09-03 14:59:54\n2\n15/14/15\n\n\n5\nGP\nFemale\n1998-10-04\nU\nGT3\nT\n3\n3\nother\n...\nno\n4\n3\n2\n1\n2\n5\n2015-04-07 14:59:54\n4\n6/10/10\n\n\n6\nGP\nMale\n1999-06-16\nU\nLE3\nT\n4\n3\nservices\n...\nno\n5\n4\n2\n1\n2\n5\n2013-11-15 14:59:54\n10\n15/15/15"
  },
  {
    "objectID": "posts/2020-10-19-cleaning data in r.html#missing-and-special-values",
    "href": "posts/2020-10-19-cleaning data in r.html#missing-and-special-values",
    "title": "Introduction and Exproling Raw data",
    "section": "Missing and special values",
    "text": "Missing and special values\n\nFinding missing values\n\nsocial_df = data.frame(name=c('Sarah', 'Tom', 'David', 'Alice'), n_friends=c(244,NA,145,43),status=c('going out', \"\",'Movie Night', \"\"))\n\n\n# Call is.na() on the full social_df to spot all NAs\nis.na(social_df)\n\n# Use the any() function to ask whether there are any NAs in the data\nany(is.na(social_df))\n\n# View a summary() of the dataset\nsummary(social_df)\n\n# Call table() on the status column\ntable(social_df$status)\n\n\n\n\n\nname\nn_friends\nstatus\n\n\n\n\nFALSE\nFALSE\nFALSE\n\n\nFALSE\nTRUE\nFALSE\n\n\nFALSE\nFALSE\nFALSE\n\n\nFALSE\nFALSE\nFALSE\n\n\n\n\n\n\nTRUE\n\n\n    name     n_friends             status \n Alice:1   Min.   : 43.0              :2  \n David:1   1st Qu.: 94.0   going out  :1  \n Sarah:1   Median :145.0   Movie Night:1  \n Tom  :1   Mean   :144.0                  \n           3rd Qu.:194.5                  \n           Max.   :244.0                  \n           NA's   :1                      \n\n\n\n              going out Movie Night \n          2           1           1 \n\n\n\n\nDealing with missing values\nMissing values can be a rather complex subject, but here we’ll only look at the simple case where you are simply interested in normalizing and/or removing all missing values from your data. For more information on why this is not always the best strategy, search online for “missing not at random.”\nLooking at the social_df dataset again, we asked around a bit and figured out what’s causing the missing values that you saw in the last exercise. Tom doesn’t have a social media account on this particular platform, which explains why his number of friends and current status are missing (although coded in two different ways). Alice is on the platform, but is a passive user and never sets her status, hence the reason it’s missing for her.\n\n# Replace all empty strings in status with NA\nsocial_df$status[social_df$status == \"\"] &lt;- NA\n\n# Print social_df to the console\nsocial_df\n\n# Use complete.cases() to see which rows have no missing values\ncomplete.cases(social_df)\n\n# Use na.omit() to remove all rows with any missing values\nna.omit(social_df)\n\n\n\n\n\nname\nn_friends\nstatus\n\n\n\n\nSarah\n244\ngoing out\n\n\nTom\nNA\nNA\n\n\nDavid\n145\nMovie Night\n\n\nAlice\n43\nNA\n\n\n\n\n\n\n\n    TRUE\n    FALSE\n    TRUE\n    FALSE\n\n\n\n\n\n\n\n\nname\nn_friends\nstatus\n\n\n\n\n1\nSarah\n244\ngoing out\n\n\n3\nDavid\n145\nMovie Night"
  },
  {
    "objectID": "posts/2020-10-19-cleaning data in r.html#outliers-and-obvious-errors",
    "href": "posts/2020-10-19-cleaning data in r.html#outliers-and-obvious-errors",
    "title": "Introduction and Exproling Raw data",
    "section": "Outliers and obvious errors",
    "text": "Outliers and obvious errors\n\nDealing with outliers and obvious errors\nWhen dealing with strange values in your data, you often must decide whether they are just extreme or actually erroneous. Extreme values show up all over the place, but you, the data analyst, must figure out when they are plausible and when they are not.\n\n# Look at a summary() of students3\nsummary(students3)\n\n# View a histogram of the studytime variable\nhist(students3$studytime)\n\n# View a histogram of the failures variable\nhist(students3$failures)\n\n# View a histogram of absences, but force zeros to be bucketed to the right of zero\nhist(students3$failures, right=FALSE)\n\n       X1           school              sex                 dob            \n Min.   :  1.0   Length:395         Length:395         Min.   :1996-11-02  \n 1st Qu.: 99.5   Class :character   Class :character   1st Qu.:1997-11-04  \n Median :198.0   Mode  :character   Mode  :character   Median :1998-12-16  \n Mean   :198.0                                         Mean   :1998-10-30  \n 3rd Qu.:296.5                                         3rd Qu.:1999-10-29  \n Max.   :395.0                                         Max.   :2000-10-25  \n   address            famsize            Pstatus          Medu    Fedu   \n Length:395         Length:395         Length:395         0:  3   0:  2  \n Class :character   Class :character   Class :character   1: 59   1: 82  \n Mode  :character   Mode  :character   Mode  :character   2:103   2:115  \n                                                          3: 99   3:100  \n                                                          4:131   4: 96  \n                                                                         \n     Mjob               Fjob              reason            guardian        \n Length:395         Length:395         Length:395         Length:395        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n   traveltime      studytime        failures       schoolsup        \n Min.   :1.000   Min.   :1.000   Min.   :0.0000   Length:395        \n 1st Qu.:1.000   1st Qu.:1.000   1st Qu.:0.0000   Class :character  \n Median :1.000   Median :2.000   Median :0.0000   Mode  :character  \n Mean   :1.448   Mean   :2.035   Mean   :0.3342                     \n 3rd Qu.:2.000   3rd Qu.:2.000   3rd Qu.:0.0000                     \n Max.   :4.000   Max.   :4.000   Max.   :3.0000                     \n    famsup              paid            activities          nursery         \n Length:395         Length:395         Length:395         Length:395        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    higher            internet           romantic             famrel     \n Length:395         Length:395         Length:395         Min.   :1.000  \n Class :character   Class :character   Class :character   1st Qu.:4.000  \n Mode  :character   Mode  :character   Mode  :character   Median :4.000  \n                                                          Mean   :3.944  \n                                                          3rd Qu.:5.000  \n                                                          Max.   :5.000  \n    freetime         goout            Dalc            Walc      \n Min.   :1.000   Min.   :1.000   Min.   :1.000   Min.   :1.000  \n 1st Qu.:3.000   1st Qu.:2.000   1st Qu.:1.000   1st Qu.:1.000  \n Median :3.000   Median :3.000   Median :1.000   Median :2.000  \n Mean   :3.235   Mean   :3.109   Mean   :1.481   Mean   :2.291  \n 3rd Qu.:4.000   3rd Qu.:4.000   3rd Qu.:2.000   3rd Qu.:3.000  \n Max.   :5.000   Max.   :5.000   Max.   :5.000   Max.   :5.000  \n     health       nurse_visit                     absences     \n Min.   :1.000   Min.   :2013-10-28 14:59:54   Min.   : 0.000  \n 1st Qu.:3.000   1st Qu.:2014-04-07 02:59:54   1st Qu.: 0.000  \n Median :4.000   Median :2014-09-15 14:59:54   Median : 4.000  \n Mean   :3.554   Mean   :2014-10-10 05:31:11   Mean   : 5.709  \n 3rd Qu.:5.000   3rd Qu.:2015-04-08 02:59:54   3rd Qu.: 8.000  \n Max.   :5.000   Max.   :2015-10-15 14:59:54   Max.   :75.000  \n    Grades         \n Length:395        \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother look at strange values\nAnother useful way of looking at strange values is with boxplots. Simply put, boxplots draw a box around the middle 50% of values for a given variable, with a bolded horizontal line drawn at the median. Values that fall far from the bulk of the data points (i.e. outliers) are denoted by open circles.\n\nboxplot(students3$studytime)"
  },
  {
    "objectID": "posts/2024-04-05-avocado.html",
    "href": "posts/2024-04-05-avocado.html",
    "title": "Avocado Sales Analysis",
    "section": "",
    "text": "Avocado is a fruit of the family Lauraceae. It is also known as alligator pear or butter fruit. Avocados are cultivated for their buttery consistency and nutty flavor and are used in both savory and sweet dishes. They are a source of vitamins C, E, K, and B6, as well as riboflavin, niacin, folate, pantothenic acid, magnesium, and potassium. They also provide lutein, beta carotene, and omega-3 fatty acids. Avocados contain high levels of healthy, beneficial fats, which can help a person feel fuller between meals. Learn more:\n\nThis project will use a bar plot to figure out which size is the most popular.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n%matplotlib inline\n\n\navocado = pd.read_csv('../Machine- Learning/avocado/avocado.csv', index_col=0)\n\navocado.head()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n0\n2015-12-27\n1.33\n64236.62\n1036.74\n54454.85\n48.16\n8696.87\n8603.62\n93.25\n0.0\nconventional\n2015\nAlbany\n\n\n1\n2015-12-20\n1.35\n54876.98\n674.28\n44638.81\n58.33\n9505.56\n9408.07\n97.49\n0.0\nconventional\n2015\nAlbany\n\n\n2\n2015-12-13\n0.93\n118220.22\n794.70\n109149.67\n130.50\n8145.35\n8042.21\n103.14\n0.0\nconventional\n2015\nAlbany\n\n\n3\n2015-12-06\n1.08\n78992.15\n1132.00\n71976.41\n72.58\n5811.16\n5677.40\n133.76\n0.0\nconventional\n2015\nAlbany\n\n\n4\n2015-11-29\n1.28\n51039.60\n941.48\n43838.39\n75.78\n6183.95\n5986.26\n197.69\n0.0\nconventional\n2015\nAlbany\n\n\n\n\n\n\n\n\n\navocado.tail()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n7\n2018-02-04\n1.63\n17074.83\n2046.96\n1529.20\n0.00\n13498.67\n13066.82\n431.85\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n8\n2018-01-28\n1.71\n13888.04\n1191.70\n3431.50\n0.00\n9264.84\n8940.04\n324.80\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n9\n2018-01-21\n1.87\n13766.76\n1191.92\n2452.79\n727.94\n9394.11\n9351.80\n42.31\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n10\n2018-01-14\n1.93\n16205.22\n1527.63\n2981.04\n727.01\n10969.54\n10919.54\n50.00\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n11\n2018-01-07\n1.62\n17489.58\n2894.77\n2356.13\n224.53\n12014.15\n11988.14\n26.01\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n\n\n\n\n\n\n\nBar plots are used for revealing relationships between categorical data () and numerical data (Volume) variables, but manipulation on the data first is needed in order to get the numbers needed for plotting."
  },
  {
    "objectID": "posts/2024-04-05-avocado.html#time-series-modeling-using-historical-data.",
    "href": "posts/2024-04-05-avocado.html#time-series-modeling-using-historical-data.",
    "title": "Avocado Sales Analysis",
    "section": "",
    "text": "Avocado is a fruit of the family Lauraceae. It is also known as alligator pear or butter fruit. Avocados are cultivated for their buttery consistency and nutty flavor and are used in both savory and sweet dishes. They are a source of vitamins C, E, K, and B6, as well as riboflavin, niacin, folate, pantothenic acid, magnesium, and potassium. They also provide lutein, beta carotene, and omega-3 fatty acids. Avocados contain high levels of healthy, beneficial fats, which can help a person feel fuller between meals. Learn more:\n\nThis project will use a bar plot to figure out which size is the most popular.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n%matplotlib inline\n\n\navocado = pd.read_csv('../Machine- Learning/avocado/avocado.csv', index_col=0)\n\navocado.head()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n0\n2015-12-27\n1.33\n64236.62\n1036.74\n54454.85\n48.16\n8696.87\n8603.62\n93.25\n0.0\nconventional\n2015\nAlbany\n\n\n1\n2015-12-20\n1.35\n54876.98\n674.28\n44638.81\n58.33\n9505.56\n9408.07\n97.49\n0.0\nconventional\n2015\nAlbany\n\n\n2\n2015-12-13\n0.93\n118220.22\n794.70\n109149.67\n130.50\n8145.35\n8042.21\n103.14\n0.0\nconventional\n2015\nAlbany\n\n\n3\n2015-12-06\n1.08\n78992.15\n1132.00\n71976.41\n72.58\n5811.16\n5677.40\n133.76\n0.0\nconventional\n2015\nAlbany\n\n\n4\n2015-11-29\n1.28\n51039.60\n941.48\n43838.39\n75.78\n6183.95\n5986.26\n197.69\n0.0\nconventional\n2015\nAlbany\n\n\n\n\n\n\n\n\n\navocado.tail()\n\n\n\n\n\n\n\n\n\nDate\nAveragePrice\nTotal Volume\n4046\n4225\n4770\nTotal Bags\nSmall Bags\nLarge Bags\nXLarge Bags\ntype\nyear\nregion\n\n\n\n\n7\n2018-02-04\n1.63\n17074.83\n2046.96\n1529.20\n0.00\n13498.67\n13066.82\n431.85\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n8\n2018-01-28\n1.71\n13888.04\n1191.70\n3431.50\n0.00\n9264.84\n8940.04\n324.80\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n9\n2018-01-21\n1.87\n13766.76\n1191.92\n2452.79\n727.94\n9394.11\n9351.80\n42.31\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n10\n2018-01-14\n1.93\n16205.22\n1527.63\n2981.04\n727.01\n10969.54\n10919.54\n50.00\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n11\n2018-01-07\n1.62\n17489.58\n2894.77\n2356.13\n224.53\n12014.15\n11988.14\n26.01\n0.0\norganic\n2018\nWestTexNewMexico\n\n\n\n\n\n\n\n\n\nBar plots are used for revealing relationships between categorical data () and numerical data (Volume) variables, but manipulation on the data first is needed in order to get the numbers needed for plotting."
  },
  {
    "objectID": "posts/2024-04-05-avocado.html#total-volume-sold-for-each-avocado-type-group",
    "href": "posts/2024-04-05-avocado.html#total-volume-sold-for-each-avocado-type-group",
    "title": "Avocado Sales Analysis",
    "section": "Total volume sold for each avocado type group",
    "text": "Total volume sold for each avocado type group\n\n\nsold_by_size = avocado.groupby('type')['Total Volume'].sum()\nsold_by_size.plot(kind='bar', x='type', y = 'Total Volume') \nplt.show() \n\n\n\n\n\n\n\n\nIt looks like type Conventional avocados were the most-purchased type, but organictype avocados were a close second."
  },
  {
    "objectID": "posts/Powerbi Visualization Report.html",
    "href": "posts/Powerbi Visualization Report.html",
    "title": "Blog",
    "section": "",
    "text": "from powerbiclient import QuickVisualize, get_dataset_config, Report\nfrom powerbiclient.authentication import DeviceCodeLoginAuthentication\nfrom powerbiclient.authentication import InteractiveLoginAuthentication\n\nimport pandas as pd\n\nModuleNotFoundError: No module named 'powerbiclient'\n\n\n\nimport pandas as pd\n\ndf = pd.read_csv(\"C:/Users/WebXpert/Boot Camp Data Science wk1/SVMtrain.csv\")\n\nprint(df.head())\n\n   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch     Fare  \\\n0            1         0       3    Male  22.0      1      0   7.2500   \n1            2         1       1  female  38.0      1      0  71.2833   \n2            3         1       3  female  26.0      0      0   7.9250   \n3            4         1       1  female  35.0      1      0  53.1000   \n4            5         0       3    Male  35.0      0      0   8.0500   \n\n   Embarked  \n0         3  \n1         1  \n2         3  \n3         3  \n4         3  \n\n\n\nauth = DeviceCodeLoginAuthentication()\n\nNameError: name 'DeviceCodeLoginAuthentication' is not defined\n\n\n\nQuickVisualize(get_dataset_conf(df), auth)"
  },
  {
    "objectID": "posts/2024-04-08-Titanic_dataset.html",
    "href": "posts/2024-04-08-Titanic_dataset.html",
    "title": "Importing Libraries and Modules",
    "section": "",
    "text": "import pandas as pd # Reading Dataset\n\nimport numpy as np # Operation on Datasets\n\nimport matplotlib.pyplot as plt #Visualization Library\n\nimport seaborn as sns # Enhanced Visualization Library\n\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor # Handling Multicollinearity\n\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder \n\nfrom sklearn.linear_model import LogisticRegressionCV\n\nfrom sklearn.svm import SVC \n\nfrom sklearn.model_split import train_test_split\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom xgboost import XGBClassifier # Boosting Model Classsification\n\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_auc_score, roc_curve\n\nfrom sklearn.neural_network import MLPClassifier #Neural Networks Classidication\n\n\n:"
  },
  {
    "objectID": "posts/2024-04-08-Titanic_dataset.html#information-about-dataset",
    "href": "posts/2024-04-08-Titanic_dataset.html#information-about-dataset",
    "title": "Importing Libraries and Modules",
    "section": "Information about Dataset",
    "text": "Information about Dataset\n\n# Information about the Dataset\ntitanic_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 889 entries, 0 to 888\nData columns (total 9 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  889 non-null    int64  \n 1   Survived     889 non-null    int64  \n 2   Pclass       889 non-null    int64  \n 3   Sex          889 non-null    object \n 4   Age          889 non-null    float64\n 5   SibSp        889 non-null    int64  \n 6   Parch        889 non-null    int64  \n 7   Fare         889 non-null    float64\n 8   Embarked     889 non-null    int64  \ndtypes: float64(2), int64(6), object(1)\nmemory usage: 62.6+ KB\n\n\n\n# Reading throuth the Dataset\n\nimport pandas as pd\ntitanic_df = pd.read_csv('C:/Users/WebXpert/Boot Camp Data Science wk1/SVMtrain.csv')\ntitanic_df.head()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\n...\nParch\nFare\nEmbarked\n\n\n\n\n0\n1\n0\n3\n...\n0\n7.2500\n3\n\n\n1\n2\n1\n1\n...\n0\n71.2833\n1\n\n\n2\n3\n1\n3\n...\n0\n7.9250\n3\n\n\n3\n4\n1\n1\n...\n0\n53.1000\n3\n\n\n4\n5\n0\n3\n...\n0\n8.0500\n3\n\n\n\n\n5 rows × 9 columns"
  },
  {
    "objectID": "posts/2024-04-08-Titanic_dataset.html#describe-dataset",
    "href": "posts/2024-04-08-Titanic_dataset.html#describe-dataset",
    "title": "Importing Libraries and Modules",
    "section": "Describe dataset",
    "text": "Describe dataset\n\nimport pandas as pd\n\ntitanic_df = pd.read_csv('C:/Users/WebXpert/Boot Camp Data Science wk1/SVMtrain.csv')\npd.options.display.max_columns = 6\ntitanic_df.describe()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\n...\nParch\nFare\nEmbarked\n\n\n\n\ncount\n889.000000\n889.000000\n889.000000\n...\n889.000000\n889.000000\n889.000000\n\n\nmean\n446.000000\n0.382452\n2.311586\n...\n0.382452\n32.096681\n2.535433\n\n\nstd\n256.998173\n0.486260\n0.834700\n...\n0.806761\n49.697504\n0.792088\n\n\nmin\n1.000000\n0.000000\n1.000000\n...\n0.000000\n0.000000\n1.000000\n\n\n25%\n224.000000\n0.000000\n2.000000\n...\n0.000000\n7.895800\n2.000000\n\n\n50%\n446.000000\n0.000000\n3.000000\n...\n0.000000\n14.454200\n3.000000\n\n\n75%\n668.000000\n1.000000\n3.000000\n...\n0.000000\n31.000000\n3.000000\n\n\nmax\n891.000000\n1.000000\n3.000000\n...\n6.000000\n512.329200\n3.000000\n\n\n\n\n8 rows × 8 columns\n\n\n\n\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\ntitanic_df = pd.read_csv('C:/Users/WebXpert/Boot Camp Data Science wk1/SVMtrain.csv')\n\ntitanic_df.groupby('Sex')[['Survived']].mean()\n\n\n\n\n\n\n\n\n\nSurvived\n\n\nSex\n\n\n\n\n\nMale\n0.188908\n\n\nfemale\n0.740385\n\n\n\n\n\n\n\n\n\ntitanic_df.groupby(['Sex', 'Pclass'])['Survived'].aggregate('mean').unstack()\n\n\n\n\n\n\n\n\nPclass\n1\n2\n3\n\n\nSex\n\n\n\n\n\n\n\nMale\n0.368852\n0.157407\n0.135447\n\n\nfemale\n0.967391\n0.921053\n0.500000"
  },
  {
    "objectID": "posts/2024-04-08-Titanic_dataset.html#plotting-our-data",
    "href": "posts/2024-04-08-Titanic_dataset.html#plotting-our-data",
    "title": "Importing Libraries and Modules",
    "section": "Plotting our Data",
    "text": "Plotting our Data\n\n\ntitanic_df = pd.read_csv('C:/Users/WebXpert/Boot Camp Data Science wk1/SVMtrain.csv')\nplt.scatter(titanic_df['Age'], titanic_df['Fare'], c=titanic_df['Pclass'])\n\n#Purple dot First Class\n#Green Dots Second Class\n#Yellow Dots Thirds\n\nplt.xlabel('Age')\nplt.ylabel('Fare')\n\nText(0, 0.5, 'Fare')"
  },
  {
    "objectID": "posts/2024-04-08-Titanic_dataset.html#line-plotting-separating-passenger-class",
    "href": "posts/2024-04-08-Titanic_dataset.html#line-plotting-separating-passenger-class",
    "title": "Importing Libraries and Modules",
    "section": "Line plotting separating Passenger class",
    "text": "Line plotting separating Passenger class\n\ntitanic_df = pd.read_csv('C:/Users/WebXpert/Boot Camp Data Science wk1/SVMtrain.csv')\n\nplt.scatter(titanic_df['Age'], titanic_df['Fare'], c=titanic_df['Pclass'])\n\nplt.plot([0, 80], [85, 5])"
  },
  {
    "objectID": "posts/2024-04-08-Titanic_dataset.html#data-visualization",
    "href": "posts/2024-04-08-Titanic_dataset.html#data-visualization",
    "title": "Importing Libraries and Modules",
    "section": "Data Visualization",
    "text": "Data Visualization\n\nimport warnings\n\nimport pandas as pd\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n\ntitanic_df = pd.read_csv('C:/Users/WebXpert/Boot Camp Data Science wk1/SVMtrain.csv')\n\n# To suppress all warnings\nwarnings.filterwarnings('ignore')\n# Checking distibution of the various features in the dataset\n\nnum_cols = titanic_df.shape[1]\nnum_rows = (num_cols + 2) # Calculate the number of rows needed\n\nplt.figure(figsize = (15, 5 * num_rows)) # Adjuct the figure size baded on the number of rows \n\nfor i, col in enumerate(titanic_df, 1):\n    \n    if titanic_df[col].dtype != 'object':\n\n        plt.subplot(num_rows, 3, i) # 3 columns per rows\n\n        sns.boxplot(x=titanic_df[col], orient = 'horizontal')\n        plt.title(f' Box Plot of {col}')\n\n        plt.tight_layout()"
  },
  {
    "objectID": "posts/2024-04-08-Titanic_dataset.html#histograms",
    "href": "posts/2024-04-08-Titanic_dataset.html#histograms",
    "title": "Importing Libraries and Modules",
    "section": "Histograms",
    "text": "Histograms\n\n#More on Visualizations\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\ntitanic_df = pd.read_csv('C:/Users/WebXpert/Boot Camp Data Science wk1/SVMtrain.csv')\n\nplt.figure(figsize=(15, 10))\n\nfor i, col in enumerate(titanic_df, 1):\n  if titanic_df[col].dtype != 'object':\n        plt.subplot(num_rows, 3 , i)\n        \n        sns.histplot(titanic_df[col], kde = True) # Create a Histogram with a kernel density estimate\n\n        plt.title(f' Histogram of {col}')\n\n        plt.tight_layout()\n\nAttributeError: module 'seaborn' has no attribute 'histplot'"
  },
  {
    "objectID": "posts/2024-04-08-Titanic_dataset.html#score-the-model",
    "href": "posts/2024-04-08-Titanic_dataset.html#score-the-model",
    "title": "Importing Libraries and Modules",
    "section": "Score the Model",
    "text": "Score the Model\n\n# Showing how good our model is by counting the number of datapoint it predicts correctly\n\n#This is the Accuracy score.\n\nimport pandas as pd\n\nfrom sklearn.linear_model import LogisticRegression\n\ntitanic_df = pd.read_csv('C:/Users/WebXpert/Boot Camp Data Science wk1/SVMtrain.csv')\n\ntitanic_df['male'] = titanic_df['Sex'] == 'male'\n\nX = titanic_df[['Pclass', 'male', 'SibSp', 'Age', 'Parch', 'Fare']].values\n\ny = titanic_df['Survived'].values\n\nmodel = LogisticRegression()\n\nmodel.fit(X, y)\n\ny_pred = model.predict(X)\n\nprint((y == y_pred).sum())\nprint((y ==  y_pred).sum() / y.shape[0])\n\nprint(model.score(X, y))\n\n\n\n\n\n631\n0.7097862767154106\n0.7097862767154106\n\n\n\n#Split the model\nX_train, X_test, y_train, y_test = train_test_split()"
  }
]